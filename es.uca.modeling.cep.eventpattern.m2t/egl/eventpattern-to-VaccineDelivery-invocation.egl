[%
var smartcontracts : Sequence = SmartContract.allInstances();

	for (sc : SmartContract in smartcontracts) {	%]
		[%if (sc.typeName == 'VaccineDelivery') {%]
package es.uca.modeling.cep.smartcontract.code;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;

public class [%=sc.typeName%]_invocation_[%=CEPEventPattern.allInstances.at(0).patternName%] {
	
	private final static BigInteger GAS_LIMIT = BigInteger.valueOf(6721975L);
	private final static BigInteger GAS_PRICE = BigInteger.valueOf(2000000000L);
	private final static String PRIVATE_KEY = "[%=sc.privateKey%]";
	private final static String CONTRACT_ADDRESS = "[%=sc.contractAddress%]";
	
	[%for(cf: ContractFunction in sc.SmartContractProperties) {%]
		[%if(cf.name == "registerEvent") {
		for(ip : InputParameter in cf.InputParametersFunction){
				if(ip.name == "eventName"){%]
	private final static String EVENT_NAME = "[%=ip.value%]";	
		[%} else if(ip.name == "eventInfo"){%]
	private final static String EVENT_INFO = "[%=ip.value%]";
		[%}}}}%]		
		
	public static void main(String[] args) {
		try {
			new [%=sc.typeName%]_invocation_[%=CEPEventPattern.allInstances.at(0).patternName%]();
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	public [%=sc.typeName%]_invocation_[%=CEPEventPattern.allInstances.at(0).patternName%]() throws Exception {
		
		Web3j web3j = Web3j.build(new HttpService());
		Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
		System.out.println(web3ClientVersion.getWeb3ClientVersion());
		
		Credentials credentials = getCredentialsFromPrivateKey();
		
		VaccineDelivery vaccinedelivery = loadContract(CONTRACT_ADDRESS, web3j, credentials);

		System.out.println("Deployed contract address: " + vaccinedelivery.getContractAddress());
		
		[%for(cf: ContractFunction in sc.SmartContractProperties) {%]
		[%if(cf.name == "registerEvent" and not cf.inboundLink.isEmpty()) {%]
		System.out.println(vaccinedelivery.registerEvent(EVENT_NAME, EVENT_INFO).send().getTransactionHash());
		[%}}%]
			
	}
		
	private Credentials getCredentialsFromPrivateKey() {
		//The create method receives a private key to generate the credentials 
		return Credentials.create(PRIVATE_KEY);
	}
	
	private VaccineDelivery loadContract(String contractAddress, Web3j web3j, Credentials credentials) {
		return VaccineDelivery.load(contractAddress, web3j, credentials, GAS_PRICE, GAS_LIMIT);
	}
	
}
[%}}%]