package BlindAuction;

ESTO ES UNA PRUEBA de la invocacion del contrato BlindAuction

[%
var smartcontracts : Sequence = SmartContract.allInstances();
%]
asdfasfd
[%	
	for (sc : SmartContract in smartcontracts) {	%]
[%=sc.typeName%]	
		[%if (sc.typeName == "BlindAuction") {%]
Contrato BlindAuction
			[%for(cf: ContractFunction in sc.SmartContractProperties) {
				if(cf.name == "reveal"){%]
generacion de codigo para contrato 1 - Funcion [%=cf.name%]
					[%for(ip: InputParameter in cf.InputParametersFunction) {%]	
Parametros de entrada:
[%=ip.type%] : [%=ip.name%] 
					[%}for(op: OutputParameter in cf.OutputParametersFunction) {%]

Parametros de salida:
[%=op.type%] : [%=op.name%]					
					[%}%]
	    [%}}} 
	    if (sc.typeName == "contrato 2") {%]
generacion de codigo para contrato 2              
	    [%} 
	    if (sc.typeName == "contrato 3") {%]
generacion de codigo para contrato 3              
	    [%}
	}  
%]

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;

public class BlindAuction_invocation {
	
	private final static String PRIVATE_KEY = "your PRIVATE_KEY";
	
	private final static BigInteger GAS_LIMIT = BigInteger.valueOf(6721975L);
	private final static BigInteger GAS_PRICE = BigInteger.valueOf(2000000000L);
	
	private final static String CONTRACT_ADDRESS = "your CONTRACT_ADDRESS";
	
	public static void main(String[] args) {
		try {
			new BlindAuction_invocation();
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	private BlindAuction_invocation() throws Exception {
		
		Web3j web3j = Web3j.build(new HttpService("https://ropsten.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
		System.out.println(web3ClientVersion.getWeb3ClientVersion());
		
		Credentials credentials = getCredentialsFromPrivateKey();
		
		Estados estados = loadContract(CONTRACT_ADDRESS, web3j, credentials);
				
		System.out.println("Deployed contract address: " + estados.getContractAddress());

	}
	
	private Credentials getCredentialsFromPrivateKey() {
		//El metodo create recibe una clave privada para generar las credenciales
		return Credentials.create(PRIVATE_KEY);
	}
	
	
	private Estados loadContract(String contractAddress, Web3j web3j, Credentials credentials) {
		
		return Estados.load(contractAddress, web3j, credentials, GAS_PRICE, GAS_LIMIT);
		
	}
	
}