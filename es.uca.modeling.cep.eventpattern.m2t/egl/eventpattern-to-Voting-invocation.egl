[%
var smartcontracts : Sequence = SmartContract.allInstances();

	for (sc : SmartContract in smartcontracts) {	%]
		[%if (sc.typeName == 'Voting') {%]
package Voting;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;

public class [%=sc.typeName%]_invocation {
	
	private final static String PRIVATE_KEY = "84480F5478DDF2DD563360204281753E5285248E9ED0A3E70E2F032810D28C80";

	private final static BigInteger GAS_LIMIT = BigInteger.valueOf(6721975L);
	private final static BigInteger GAS_PRICE = BigInteger.valueOf(2000000000L);
				
	private final static String CONTRACT_ADDRESS = "0x3D091B157d624d0F5ee91D99875D9d493dA741c1";
	
	public static void main(String[] args) {
		try {
			new [%=sc.typeName%]_invocation();
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	private [%=sc.typeName%]_invocation() throws Exception {
		
		Web3j web3j = Web3j.build(new HttpService("https://ropsten.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
		System.out.println(web3ClientVersion.getWeb3ClientVersion());
		
		Credentials credentials = getCredentialsFromPrivateKey();
		
		Voting voting = loadContract(CONTRACT_ADDRESS, web3j, credentials);
		System.out.println("Deployed contract address: " + voting.getContractAddress());
		[%for(cf: ContractFunction in sc.SmartContractProperties) {%]
		[%if(cf.name == "authorizeVoter") {%]
			[%for(ip: InputParameter in cf.InputParametersFunction) {%]	
		voting.authorizeVoter([%=ip.name%]).send();[%}}%]
		[%if(cf.name == "voteForCandidate") {%]
			[%for(ip: InputParameter in cf.InputParametersFunction) {%]	
		voting.voteForCandidate([%=ip.name%]).send();[%}}%]
		[%if(cf.name == "getVoteForCandidate") {%]
			[%for(ip: InputParameter in cf.InputParametersFunction) {%]	
		voting.getVoteForCandidate([%=ip.name%]).send();[%}}}%]

	}
	
	private Credentials getCredentialsFromPrivateKey() {
		//El metodo create recibe una clave privada para generar las credenciales
		return Credentials.create(PRIVATE_KEY);
	}
	
	private Voting loadContract(String contractAddress, Web3j web3j, Credentials credentials) {
		return Voting.load(contractAddress, web3j, credentials, GAS_PRICE, GAS_LIMIT);
	}
	
}
[%}}%]


