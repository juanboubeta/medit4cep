[%
var smartcontracts : Sequence = SmartContract.allInstances();

	for (sc : SmartContract in smartcontracts) {	%]
		[%if (sc.typeName == 'Voting') {%]
package Smartcontract_Voting;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;

public class [%=sc.typeName%]_invocation {
	
	private final static BigInteger GAS_LIMIT = BigInteger.valueOf(6721975L);
	private final static BigInteger GAS_PRICE = BigInteger.valueOf(2000000000L);
	private final static String PRIVATE_KEY = "[%=sc.privateKey%]";
	private final static String CONTRACT_ADDRESS = "[%=sc.contractAddress%]";
	
	[%for(cf: ContractFunction in sc.SmartContractProperties) {%]
		[%if(cf.name == "authorizeVoter") {
		for(ip : InputParameter in cf.InputParametersFunction){
				if(ip.name == "_address"){%]
	private final static String AUTHORIZE_ADDRESS = "[%=ip.value%]";	
		[%}
				else if(ip.name == "role"){%]
	private final static String ROLE = "[%=ip.value%]";
		[%}
				else if(ip.name == "censo"){%]
	private final static String CENSO = "[%=ip.value%]";	
		[%}}}%]
		[%if(cf.name == "voteForCandidate") {
		for(ip : InputParameter in cf.InputParametersFunction){
				if(ip.name == "_index"){%]
	private final static BigInteger VOTE_INDEX = BigInteger.valueOf([%=ip.value%]L);
		[%}}}%]
		[%if(cf.name == "getVoteForCandidate") {
		for(ip : InputParameter in cf.InputParametersFunction){
				if(ip.name == "_index"){%]
	private final static BigInteger GET_VOTE_INDEX = BigInteger.valueOf([%=ip.value%]L);
		[%}}}}%]		
		
	public static void main(String[] args) {
		try {
			new [%=sc.typeName%]_invocation();
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	private [%=sc.typeName%]_invocation() throws Exception {
		
		Web3j web3j = Web3j.build(new HttpService());
		Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
		System.out.println(web3ClientVersion.getWeb3ClientVersion());
		
		Credentials credentials = getCredentialsFromPrivateKey();
		
		Voting voting = loadContract(CONTRACT_ADDRESS, web3j, credentials);
		System.out.println("Deployed contract address: " + voting.getContractAddress());
		
		[%for(cf: ContractFunction in sc.SmartContractProperties) {%]
		[%if(cf.name == "authorizeVoter") {%]
		System.out.println(voting.authorizeVoter(AUTHORIZE_ADDRESS, ROLE, CENSO).send().getTransactionHash());
		[%}%]
		[%if(cf.name == "voteForCandidate") {%]
		System.out.println(voting.voteForCandidate(VOTE_INDEX).send().getTransactionHash());
		[%}%]
		[%if(cf.name == "getVoteForCandidate") {%]
		System.out.println(voting.getVoteForCandidate(GET_VOTE_INDEX).send());
		[%}%]
		[%if(cf.name == "getAllCandidatesWithVotes") {%]
		System.out.println(voting.getAllCandidatesWithVotes().send());
		[%}%]
		[%if(cf.name == "getTotalVotes") {%]
		System.out.println(voting.getTotalVotes().send());
		[%}%]
		[%if(cf.name == "StartTimeToVote") {%]
		System.out.println(voting.StartTimeToVote().send());
		[%}%]
		[%if(cf.name == "StopTimeToVote") {%]
		System.out.println(voting.StopTimeToVote().send());
		[%}}%]
		
	}
	
	private Credentials getCredentialsFromPrivateKey() {
		//El metodo create recibe una clave privada para generar las credenciales
		return Credentials.create(PRIVATE_KEY);
	}
	
	private Voting loadContract(String contractAddress, Web3j web3j, Credentials credentials) {
		return Voting.load(contractAddress, web3j, credentials, GAS_PRICE, GAS_LIMIT);
	}
	
}
[%}}%]


