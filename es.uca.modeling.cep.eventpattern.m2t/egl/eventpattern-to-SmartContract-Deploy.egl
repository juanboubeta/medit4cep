[%
var count;
var s;
if(SmartContract.allInstances().size() == 1){
	s = SmartContract.allInstances().get(0);
} else {
	var smartcontracts : Sequence = SmartContract.allInstances();
	var sc = System.user.choose("Select the Smart Contract to be deployed", smartcontracts.collect(e|e.typeName));
	s = smartcontracts.selectOne(e|e.typeName = sc);
}

var networks : Sequence;
networks.add("Ganache");
networks.add("Goerli");
networks.add("Kovan");
networks.add("Mainnet");
networks.add("Rinkeby");
networks.add("Ropsten");

var network = System.user.choose("Select the Ethereum network where you want to deploy the smart contract", networks);
%]
package es.uca.modeling.cep.smartcontract.code;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;

public class [%=s.typeName%]_deploy {
	
	private final static BigInteger GAS_LIMIT = BigInteger.valueOf(6721975L);
	private final static BigInteger GAS_PRICE = BigInteger.valueOf(2000000000L);
	private final static String PRIVATE_KEY = "[%=s.privateKey%]";
			
	public static void main(String[] args) {
		try {
			new [%=s.typeName%]_deploy();
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	public [%=s.typeName%]_deploy() throws Exception {
		[%switch(network){
		case "Ganache":%]
		Web3j web3j = Web3j.build(new HttpService());
		[%break;
		case "Goerli":%]
		Web3j web3j = Web3j.build(new HttpService("https://goerli.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Kovan":%]
		Web3j web3j = Web3j.build(new HttpService("https://kovan.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Mainnet":%]
		Web3j web3j = Web3j.build(new HttpService("https://mainnet.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Rinkeby":%]
		Web3j web3j = Web3j.build(new HttpService("https://rinkeby.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Ropsten":%]
		Web3j web3j = Web3j.build(new HttpService("https://ropsten.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%default:%]
		Web3j web3j = Web3j.build(new HttpService());
		[%}%]		
		Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
		System.out.println(web3ClientVersion.getWeb3ClientVersion());
		
		Credentials credentials = getCredentialsFromPrivateKey();
				
		String deployedAddress = deployContract(web3j, credentials);
		
		File contractAddress = new File("[%=s.typeName%]_contractAddress.txt");
		BufferedWriter bw;
		if(contractAddress.exists()) {
			bw = new BufferedWriter(new FileWriter(contractAddress));
			bw.write(deployedAddress);
			bw.close();
		} else {
			bw = new BufferedWriter(new FileWriter(contractAddress));
			bw.write(deployedAddress);
			bw.close();
		}
		
	}
	
	private Credentials getCredentialsFromPrivateKey() {
		//The create method receives a private key to generate the credentials 
		return Credentials.create(PRIVATE_KEY);
	}
	
	private String deployContract(Web3j web3j, Credentials credentials) throws Exception {
		
		[%if(s.ConstructorParametersContract.size() > 0){
		count = s.ConstructorParametersContract.size();%]
			return [%=s.typeName%].deploy(web3j, credentials, GAS_PRICE, GAS_LIMIT, [%for(cp: ConstructorParameter in s.ConstructorParametersContract) { if(count > 1){if(cp.type->toString()=="String"){%]"[%=cp.value%]", [%} else if (cp.type->toString()="Integer"){%]BigInteger.valueOf([%=cp.value%]L), [%} else {%][%=cp.value%], [%}%] [%count -= 1;} else { if(cp.type->toString()=="String"){%]"[%=cp.value%]"[%} else if (cp.type->toString()="Integer"){%]BigInteger.valueOf([%=cp.value%]L)[%} else {%][%=cp.value%][%}%][% count -= 1;}}%])
			.send()
			.getContractAddress();
		[%} else {%]
			return [%=s.typeName%].deploy(web3j, credentials, GAS_PRICE, GAS_LIMIT)
			.send()
			.getContractAddress();
		[%}%]
	}	

}