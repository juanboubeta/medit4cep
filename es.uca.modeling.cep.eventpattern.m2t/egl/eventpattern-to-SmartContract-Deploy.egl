[%
var caterpillar = false;
var s;
if(SmartContract.allInstances().size() == 1){
	s = SmartContract.allInstances().get(0);
} else {
	var smartcontracts : Sequence = SmartContract.allInstances();
	var sc = System.user.choose("Select the Smart Contract to be deployed", smartcontracts.collect(e|e.typeName));
	s = smartcontracts.selectOne(e|e.typeName = sc);
}
%]

package Smartcontract_[%=s.typeName%];

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;

public class [%=s.typeName%]_deploy {
	
	private final static BigInteger GAS_LIMIT = BigInteger.valueOf(6721975L);
	private final static BigInteger GAS_PRICE = BigInteger.valueOf(2000000000L);
	private final static String PRIVATE_KEY = "[%=s.typeName%]";
			
	public static void main(String[] args) {
		try {
			new [%=s.typeName%]_deploy();
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	public [%=s.typeName%]_deploy() throws Exception {
		
		[%for(cf: ContractFunction in s.SmartContractProperties) {
			if(cf.name == "startExecution" or cf.name == "handleEvent" or cf.name == "killProcess" or cf.name == "broadcastSignal" or cf.name == "getWorklistAddress" or cf.name == "getInstanceIndex"){
				caterpillar = true;
			}
		}%]
		
		Web3j web3j = Web3j.build(new HttpService());
		Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
		System.out.println(web3ClientVersion.getWeb3ClientVersion());
		
		Credentials credentials = getCredentialsFromPrivateKey();
				
		String deployedAddress = deployContract(web3j, credentials);
		
		File contractAddress = new File("[%=s.typeName%]_contractAddress.txt");
		BufferedWriter bw;
		if(contractAddress.exists()) {
			bw = new BufferedWriter(new FileWriter(contractAddress));
			bw.write(deployedAddress);
			bw.close();
		} else {
			bw = new BufferedWriter(new FileWriter(contractAddress));
			bw.write(deployedAddress);
			bw.close();
		}
		
	}
	
	private Credentials getCredentialsFromPrivateKey() {
		//El metodo create recibe una clave privada para generar las credenciales
		return Credentials.create(PRIVATE_KEY);
	}
	
	private String deployContract(Web3j web3j, Credentials credentials) throws Exception {
		[%if(s.typeName == "Voting") {%]
			return [%=s.typeName%].deploy(web3j, credentials, GAS_PRICE, GAS_LIMIT,"Candidato 1","Candidato 2","Candidato 3")
			.send()
			.getContractAddress();
		[%} else if(s.typeName == "Purchase") {%]
			return [%=s.typeName%].deploy(web3j, credentials, GAS_PRICE, GAS_LIMIT, 0000000000000000001)
			.send()
			.getContractAddress();
		[%} else if(s.typeName == "Auction") {%]
			return [%=s.typeName%].deploy(web3j, credentials, GAS_PRICE, GAS_LIMIT, 86400, "0xb7C7d9bD74742193dBAA3C1C21A2Ab63b39113Db")
			.send()
			.getContractAddress();
		[%} else if(caterpillar == true) {%]
			return [%=s.typeName%].deploy(web3j, credentials, GAS_PRICE, GAS_LIMIT, "", "", "")
			.send()
			.getContractAddress();
		[%} else {%]
			return [%=s.typeName%].deploy(web3j, credentials, GAS_PRICE, GAS_LIMIT)
			.send()
			.getContractAddress();
		[%}%]
	}	

}