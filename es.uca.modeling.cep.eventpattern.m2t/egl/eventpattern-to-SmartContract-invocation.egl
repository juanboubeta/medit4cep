[%
var count;
var sc;
if(SmartContract.allInstances().size() == 1){
	sc = SmartContract.allInstances().get(0);
} else{
	var smartcontracts : Sequence = SmartContract.allInstances();
	var s = System.user.choose("Select the Smart Contract to be generated", smartcontracts.collect(e|e.typeName));
	sc = smartcontracts.selectOne(e|e.typeName = s);
}

var networks : Sequence;
networks.add("Ganache");
networks.add("Goerli");
networks.add("Kovan");
networks.add("Mainnet");
networks.add("Rinkeby");
networks.add("Ropsten");

var network = System.user.choose("Select the Ethereum network where you want to deploy the smart contract", networks);
%]

package es.uca.modeling.cep.smartcontract.code;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;

public class [%=sc.typeName%]_invocation_[%=CEPEventPattern.allInstances.at(0).patternName%] {
	
	private final static BigInteger GAS_LIMIT = BigInteger.valueOf(6721975L);
	private final static BigInteger GAS_PRICE = BigInteger.valueOf(2000000000L);
	private final static String PRIVATE_KEY = "[%=sc.privateKey%]";
	private final static String CONTRACT_ADDRESS = "[%=sc.contractAddress%]";

	
	[%for(cf: ContractFunction in sc.SmartContractProperties) {
		if(not cf.inboundLink.isEmpty()){%]
		[%for(ip : InputParameter in cf.InputParametersFunction){%]
		[%if(ip.type->toString() == "Integer") {%]
	private final static BigInteger VAR_[%=cf.name%]_[%=ip.name%] = BigInteger.valueOf([%=ip.value%]L);		
		[%} else if(ip.type->toString() == "Boolean" or ip.type->toString() == "Long" or ip.type->toString() == "Double" or ip.type->toString() == "Float") {%]
	private final static [%=ip.type%] VAR_[%=cf.name%]_[%=ip.name%] = [%=ip.value%];	
		[%} else {%]
	private final static [%=ip.type%] VAR_[%=cf.name%]_[%=ip.name%] = "[%=ip.value%]";		
		[%}}}}%]	
		
	public static void main(String[] args) {
		try {
			new [%=sc.typeName%]_invocation_[%=CEPEventPattern.allInstances.at(0).patternName%]();
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	public [%=sc.typeName%]_invocation_[%=CEPEventPattern.allInstances.at(0).patternName%]() throws Exception {
		[%switch(network){
		case "Ganache":%]
		Web3j web3j = Web3j.build(new HttpService());
		[%break;
		case "Goerli":%]
		Web3j web3j = Web3j.build(new HttpService("https://goerli.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Kovan":%]
		Web3j web3j = Web3j.build(new HttpService("https://kovan.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Mainnet":%]
		Web3j web3j = Web3j.build(new HttpService("https://mainnet.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Rinkeby":%]
		Web3j web3j = Web3j.build(new HttpService("https://rinkeby.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Ropsten":%]
		Web3j web3j = Web3j.build(new HttpService("https://ropsten.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%default:%]
		Web3j web3j = Web3j.build(new HttpService());
		[%}%]
		Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
		System.out.println(web3ClientVersion.getWeb3ClientVersion());
		
		Credentials credentials = getCredentialsFromPrivateKey();		

		[%=sc.typeName%] smartContract = loadContract(CONTRACT_ADDRESS, web3j, credentials);
		
		System.out.println("Deployed contract address: " + smartContract.getContractAddress());
		
		[%for(cf: ContractFunction in sc.SmartContractProperties) {
		if(not cf.inboundLink.isEmpty()){%]
		[%if(cf.InputParametersFunction.size() == 0  or cf.InputParametersFunction.size() == 1){%]
		smartContract.[%=cf.name%]([%for(ip : InputParameter in cf.InputParametersFunction){%]VAR_[%=cf.name%]_[%=ip.name%][%}%]).send();
		[%}}}%]
		
		[%for(cf: ContractFunction in sc.SmartContractProperties) {
		if(not cf.inboundLink.isEmpty()){%]
		[%if(cf.InputParametersFunction.size() > 1){
		count = cf.InputParametersFunction.size();%]
		smartContract.[%=cf.name%]([%for(ip : InputParameter in cf.InputParametersFunction){ if(count > 1){%]VAR_[%=cf.name%]_[%=ip.name%],[%count -= 1;} else {%]VAR_[%=cf.name%]_[%=ip.name%][% count -= 1;}}%]).send();
		[%}}}%]
		
	}
	
	private Credentials getCredentialsFromPrivateKey() {
		//The create method receives a private key to generate the credentials 
		return Credentials.create(PRIVATE_KEY);
	}
		
	private [%=sc.typeName%] loadContract(String contractAddress, Web3j web3j, Credentials credentials) {
		return [%=sc.typeName%].load(contractAddress, web3j, credentials, GAS_PRICE, GAS_LIMIT);
	}
	
}