[%
var smartcontracts : Sequence = SmartContract.allInstances();

var networks : Sequence;
networks.add("Ganache");
networks.add("Goerli");
networks.add("Kovan");
networks.add("Mainnet");
networks.add("Rinkeby");
networks.add("Ropsten");

var network = System.user.choose("Select the Ethereum network where you want to deploy the smart contract", networks);

	for (sc : SmartContract in smartcontracts) {	%]
		[%if (sc.typeName == "Auction") {%]
package es.uca.modeling.cep.smartcontract.code;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;

public class [%=sc.typeName%]_invocation_[%=CEPEventPattern.allInstances.at(0).patternName%] {
	
	private final static BigInteger GAS_LIMIT = BigInteger.valueOf(6721975L);
	private final static BigInteger GAS_PRICE = BigInteger.valueOf(2000000000L);
	private final static String PRIVATE_KEY = "[%=sc.privateKey%]";
	private final static String CONTRACT_ADDRESS = "[%=sc.contractAddress%]";
	
	[%for(cf: ContractFunction in sc.SmartContractProperties) {%]
		[%if(cf.name == "bid" and not cf.inboundLink.isEmpty()) {
			for(ip : InputParameter in cf.InputParametersFunction){
				if(ip.name == "bidValue"){%]
	private final static BigInteger WEI_VALUE = BigInteger.valueOf([%=ip.value%]L);
		[%}}}}%]	
	
	public static void main(String[] args) {
		try {
			new [%=sc.typeName%]_invocation_[%=CEPEventPattern.allInstances.at(0).patternName%]();
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	public [%=sc.typeName%]_invocation_[%=CEPEventPattern.allInstances.at(0).patternName%]() throws Exception {
		
		[%switch(network){
		case "Ganache":%]
		Web3j web3j = Web3j.build(new HttpService());
		[%break;
		case "Goerli":%]
		Web3j web3j = Web3j.build(new HttpService("https://goerli.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Kovan":%]
		Web3j web3j = Web3j.build(new HttpService("https://kovan.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Mainnet":%]
		Web3j web3j = Web3j.build(new HttpService("https://mainnet.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Rinkeby":%]
		Web3j web3j = Web3j.build(new HttpService("https://rinkeby.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%case "Ropsten":%]
		Web3j web3j = Web3j.build(new HttpService("https://ropsten.infura.io/v3/06ec613b421b4f118b06204feda6db41"));
		[%default:%]
		Web3j web3j = Web3j.build(new HttpService());
		[%}%]
		Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
		System.out.println(web3ClientVersion.getWeb3ClientVersion());
		
		Credentials credentials = getCredentialsFromPrivateKey();
				
		Auction auction = loadContract(CONTRACT_ADDRESS, web3j, credentials);
		
		System.out.println("Deployed contract address: " + auction.getContractAddress());
		
		[%for(cf: ContractFunction in sc.SmartContractProperties) {%]
		[%if(cf.name == "bid" and not cf.inboundLink.isEmpty()) {%]
		System.out.println(auction.bid(WEI_VALUE).send().getTransactionHash());
		[%}if(cf.name == "withdraw" and not cf.inboundLink.isEmpty()) {%]
		System.out.println(auction.withdraw().send().getTransactionHash());
		[%}if(cf.name == "auctionEnd" and not cf.inboundLink.isEmpty()) {%]
		System.out.println(auction.auctionEnd().send().getTransactionHash());
		[%}}%]

	}
	
	private Credentials getCredentialsFromPrivateKey() {
		//The create method receives a private key to generate the credentials 
		return Credentials.create(PRIVATE_KEY);
	}
	
	private String deployContract(Web3j web3j, Credentials credentials) throws Exception {
		return Auction.deploy(web3j, credentials, GAS_PRICE, GAS_LIMIT, BigInteger.valueOf(86400L), "0x2abD29711FF22B5d8C35D6889EE0D956cB05C224")
			.send()
			.getContractAddress();
	}
	
	private Auction loadContract(String contractAddress, Web3j web3j, Credentials credentials) {
		return Auction.load(contractAddress, web3j, credentials, GAS_PRICE, GAS_LIMIT);
	}
	
}
[%}}%]