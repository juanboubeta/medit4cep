package es.uca.modeling.cep.smartcontract.code;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class Voting extends Contract {
    private static final String BINARY = "6080604052603560085560056009556006600a556008600b55601c600c556000600d60006101000a81548160ff0219169083151502179055503480156200004557600080fd5b506040516200252538038062002525833981810160405260608110156200006b57600080fd5b8101908080516401000000008111156200008457600080fd5b828101905060208101848111156200009b57600080fd5b8151856001820283011164010000000082111715620000b957600080fd5b50509291906020018051640100000000811115620000d657600080fd5b82810190506020810184811115620000ed57600080fd5b81518560018202830111640100000000821117156200010b57600080fd5b505092919060200180516401000000008111156200012857600080fd5b828101905060208101848111156200013f57600080fd5b81518560018202830111640100000000821117156200015d57600080fd5b505092919050505060016040518060e001604052806040518060400160405280600a81526020017f426c616e6b566f746573000000000000000000000000000000000000000000008152508152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000190805190602001906200021e929190620004f4565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015550505060016040518060e0016040528085815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505090600182039060005260206000209060070201600090919290919091506000820151816000019080519060200190620002e2929190620004f4565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015550505060016040518060e0016040528084815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505090600182039060005260206000209060070201600090919290919091506000820151816000019080519060200190620003a6929190620004f4565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015550505060016040518060e00160405280838152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000190805190602001906200046a929190620004f4565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015550505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620005a3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200053757805160ff191683800117855562000568565b8280016001018555821562000568579182015b82811115620005675782518255916020019190600101906200054a565b5b5090506200057791906200057b565b5090565b620005a091905b808211156200059c57600081600090555060010162000582565b5090565b90565b611f7280620005b36000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063df2d5ec711610066578063df2d5ec714610323578063e8a5cc5b146103f4578063f6d42f1514610566578063fa0e3b6e14610749576100f5565b80638da5cb5b146101cc5780639a0e7d66146102165780639cd2c496146102a0578063c3dce91f146102be576100f5565b80634bb8de6d116100d35780634bb8de6d146101685780635562eace146101725780637061bd5d146101905780638b72e818146101ae576100f5565b8063150194d4146100fa57806336c8c5ee14610118578063459f7cf814610146575b600080fd5b610102610753565b6040518082815260200191505060405180910390f35b6101446004803603602081101561012e57600080fd5b8101908080359060200190929190505050610759565b005b61014e610fc1565b604051808215151515815260200191505060405180910390f35b610170610fd4565b005b61017a610ff1565b6040518082815260200191505060405180910390f35b610198610ff7565b6040518082815260200191505060405180910390f35b6101b6610ffd565b6040518082815260200191505060405180910390f35b6101d4611003565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61021e611029565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610264578082015181840152602081019050610249565b50505050905090810190601f1680156102915780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6102a861107f565b6040518082815260200191505060405180910390f35b6102ea600480360360208110156102d457600080fd5b8101908080359060200190929190505050611085565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b61034f6004803603602081101561033957600080fd5b810190808035906020019092919050505061115d565b6040518080602001888152602001878152602001868152602001858152602001848152602001838152602001828103825289818151815260200191508051906020019080838360005b838110156103b3578082015181840152602081019050610398565b50505050905090810190601f1680156103e05780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6105646004803603606081101561040a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561044757600080fd5b82018360208201111561045957600080fd5b8035906020019184600183028401116401000000008311171561047b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104de57600080fd5b8201836020820111156104f057600080fd5b8035906020019184600183028401116401000000008311171561051257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611244565b005b61056e611ae7565b604051808060200189815260200180602001888152602001806020018781526020018060200186815260200185810385528d818151815260200191508051906020019080838360005b838110156105d25780820151818401526020810190506105b7565b50505050905090810190601f1680156105ff5780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b8381101561063857808201518184015260208101905061061d565b50505050905090810190601f1680156106655780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b8381101561069e578082015181840152602081019050610683565b50505050905090810190601f1680156106cb5780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b838110156107045780820151818401526020810190506106e9565b50505050905090810190601f1680156107315780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b610751611e7b565b005b60035481565b60011515600d60009054906101000a900460ff1615151461077957600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16156107d257600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546001828154811061082157fe5b906000526020600020906007020160010154016001828154811061084157fe5b90600052602060002090600702016001018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541115610fbe5760008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff02191690831515021790555060405160200180807f50445650000000000000000000000000000000000000000000000000000000008152506004019050604051602081830303815290604052805190602001206000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040516020018082805460018160011615610100020316600290048015610a275780601f10610a05576101008083540402835291820191610a27565b820191906000526020600020905b815481529060010190602001808311610a13575b5050915050604051602081830303815290604052805190602001201415610a8d5760018181548110610a5557fe5b906000526020600020906007020160020160008154809291906001019190505550600360008154809291906001019190505550610fbd565b60405160200180807f504e4456500000000000000000000000000000000000000000000000000000008152506005019050604051602081830303815290604052805190602001206000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040516020018082805460018160011615610100020316600290048015610b735780601f10610b51576101008083540402835291820191610b73565b820191906000526020600020905b815481529060010190602001808311610b5f575b5050915050604051602081830303815290604052805190602001201415610bd95760018181548110610ba157fe5b906000526020600020906007020160030160008154809291906001019190505550600460008154809291906001019190505550610fbc565b60405160200180807f5044494e565000000000000000000000000000000000000000000000000000008152506006019050604051602081830303815290604052805190602001206000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040516020018082805460018160011615610100020316600290048015610cbf5780601f10610c9d576101008083540402835291820191610cbf565b820191906000526020600020905b815481529060010190602001808311610cab575b5050915050604051602081830303815290604052805190602001201415610d255760018181548110610ced57fe5b906000526020600020906007020160040160008154809291906001019190505550600560008154809291906001019190505550610fbb565b60405160200180807f50415300000000000000000000000000000000000000000000000000000000008152506003019050604051602081830303815290604052805190602001206000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040516020018082805460018160011615610100020316600290048015610e0b5780601f10610de9576101008083540402835291820191610e0b565b820191906000526020600020905b815481529060010190602001808311610df7575b5050915050604051602081830303815290604052805190602001201415610e715760018181548110610e3957fe5b906000526020600020906007020160050160008154809291906001019190505550600660008154809291906001019190505550610fba565b60405160200180807f414c5500000000000000000000000000000000000000000000000000000000008152506003019050604051602081830303815290604052805190602001206000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040516020018082805460018160011615610100020316600290048015610f575780601f10610f35576101008083540402835291820191610f57565b820191906000526020600020905b815481529060010190602001808311610f43575b5050915050604051602081830303815290604052805190602001201415610fb95760018181548110610f8557fe5b9060005260206000209060070201600601600081548092919060010191905055506007600081548092919060010191905055505b5b5b5b5b5b50565b600d60009054906101000a900460ff1681565b6001600d60006101000a81548160ff021916908315150217905550565b60045481565b60075481565b60055481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600754600654600554600454600354010101016040518060400160405280601781526020017f4e756d65726f20646520566f746f7320546f74616c657300000000000000000081525090915091509091565b60065481565b6000806000806000806001878154811061109b57fe5b906000526020600020906007020160020154600188815481106110ba57fe5b906000526020600020906007020160030154600189815481106110d957fe5b90600052602060002090600702016004015460018a815481106110f857fe5b90600052602060002090600702016005015460018b8154811061111757fe5b90600052602060002090600702016006015460018c8154811061113657fe5b90600052602060002090600702016001015495509550955095509550955091939550919395565b6001818154811061116a57fe5b9060005260206000209060070201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112165780601f106111eb57610100808354040283529160200191611216565b820191906000526020600020905b8154815290600101906020018083116111f957829003601f168201915b5050505050908060010154908060020154908060030154908060040154908060050154908060060154905087565b60011515600d60009054906101000a900460ff1615151461126457600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112be57600080fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff161561131757600080fd5b60405160200180807f5044565000000000000000000000000000000000000000000000000000000000815250600401905060405160208183030381529060405280519060200120826040516020018082805190602001908083835b602083106113955780518252602082019150602081019050602083039250611372565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014156114a65760405180608001604052808281526020018381526020016008548152602001600015158152506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611456929190611e98565b506020820151816001019080519060200190611473929190611e98565b506040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050611ae2565b60405160200180807f504e445650000000000000000000000000000000000000000000000000000000815250600501905060405160208183030381529060405280519060200120826040516020018082805190602001908083835b602083106115245780518252602082019150602081019050602083039250611501565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014156116355760405180608001604052808281526020018381526020016009548152602001600015158152506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906115e5929190611e98565b506020820151816001019080519060200190611602929190611e98565b506040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050611ae1565b60405160200180807f5044494e56500000000000000000000000000000000000000000000000000000815250600601905060405160208183030381529060405280519060200120826040516020018082805190602001908083835b602083106116b35780518252602082019150602081019050602083039250611690565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014156117c4576040518060800160405280828152602001838152602001600a548152602001600015158152506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611774929190611e98565b506020820151816001019080519060200190611791929190611e98565b506040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050611ae0565b60405160200180807f5041530000000000000000000000000000000000000000000000000000000000815250600301905060405160208183030381529060405280519060200120826040516020018082805190602001908083835b60208310611842578051825260208201915060208101905060208303925061181f565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201415611953576040518060800160405280828152602001838152602001600b548152602001600015158152506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611903929190611e98565b506020820151816001019080519060200190611920929190611e98565b506040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050611adf565b60405160200180807f414c550000000000000000000000000000000000000000000000000000000000815250600301905060405160208183030381529060405280519060200120826040516020018082805190602001908083835b602083106119d157805182526020820191506020810190506020830392506119ae565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201415611ade576040518060800160405280828152602001838152602001600c548152602001600015158152506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611a92929190611e98565b506020820151816001019080519060200190611aaf929190611e98565b506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050505b5b5b5b5b505050565b606060006060600060606000606060006001600081548110611b0557fe5b90600052602060002090600702016000016001600081548110611b2457fe5b90600052602060002090600702016001015460018081548110611b4357fe5b906000526020600020906007020160000160018081548110611b6157fe5b9060005260206000209060070201600101546001600281548110611b8157fe5b90600052602060002090600702016000016001600281548110611ba057fe5b9060005260206000209060070201600101546001600381548110611bc057fe5b90600052602060002090600702016000016001600381548110611bdf57fe5b906000526020600020906007020160010154878054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c865780601f10611c5b57610100808354040283529160200191611c86565b820191906000526020600020905b815481529060010190602001808311611c6957829003601f168201915b50505050509750858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d225780601f10611cf757610100808354040283529160200191611d22565b820191906000526020600020905b815481529060010190602001808311611d0557829003601f168201915b50505050509550838054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dbe5780601f10611d9357610100808354040283529160200191611dbe565b820191906000526020600020905b815481529060010190602001808311611da157829003601f168201915b50505050509350818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e5a5780601f10611e2f57610100808354040283529160200191611e5a565b820191906000526020600020905b815481529060010190602001808311611e3d57829003601f168201915b50505050509150975097509750975097509750975097509091929394959697565b6000600d60006101000a81548160ff021916908315150217905550565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ed957805160ff1916838001178555611f07565b82800160010185558215611f07579182015b82811115611f06578251825591602001919060010190611eeb565b5b509050611f149190611f18565b5090565b611f3a91905b80821115611f36576000816000905550600101611f1e565b5090565b9056fea265627a7a72305820f37326836d9dfe93e0188f12c9e44d3ca94ee24943d0905eef1b202c3e2cbf5864736f6c63430005090032";

    public static final String FUNC_TOTALVOTESOFPDVP = "TotalVotesOfPDVP";

    public static final String FUNC_VOTEFORCANDIDATE = "voteForCandidate";

    public static final String FUNC_TIMETOVOTE = "TimeToVote";

    public static final String FUNC_STARTTIMETOVOTE = "StartTimeToVote";

    public static final String FUNC_TOTALVOTESOFPNDVP = "TotalVotesOfPNDVP";

    public static final String FUNC_TOTALVOTESOFALU = "TotalVotesOfALU";

    public static final String FUNC_TOTALVOTESOFPDINVP = "TotalVotesOfPDINVP";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETTOTALVOTES = "getTotalVotes";

    public static final String FUNC_TOTALVOTESOFPAS = "TotalVotesOfPAS";

    public static final String FUNC_GETVOTEFORCANDIDATE = "getVoteForCandidate";

    public static final String FUNC_CANDIDATESLIST = "candidatesList";

    public static final String FUNC_AUTHORIZEVOTER = "authorizeVoter";

    public static final String FUNC_GETALLCANDIDATESWITHVOTES = "getAllCandidatesWithVotes";

    public static final String FUNC_STOPTIMETOVOTE = "StopTimeToVote";

    @Deprecated
    protected Voting(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Voting(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Voting(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Voting(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> TotalVotesOfPDVP() {
        final Function function = new Function(FUNC_TOTALVOTESOFPDVP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> voteForCandidate(BigInteger _index) {
        final Function function = new Function(
                FUNC_VOTEFORCANDIDATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> TimeToVote() {
        final Function function = new Function(FUNC_TIMETOVOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> StartTimeToVote() {
        final Function function = new Function(
                FUNC_STARTTIMETOVOTE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> TotalVotesOfPNDVP() {
        final Function function = new Function(FUNC_TOTALVOTESOFPNDVP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> TotalVotesOfALU() {
        final Function function = new Function(FUNC_TOTALVOTESOFALU, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> TotalVotesOfPDINVP() {
        final Function function = new Function(FUNC_TOTALVOTESOFPDINVP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<String, BigInteger>> getTotalVotes() {
        final Function function = new Function(FUNC_GETTOTALVOTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> TotalVotesOfPAS() {
        final Function function = new Function(FUNC_TOTALVOTESOFPAS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getVoteForCandidate(BigInteger _index) {
        final Function function = new Function(FUNC_GETVOTEFORCANDIDATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> candidatesList(BigInteger param0) {
        final Function function = new Function(FUNC_CANDIDATESLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> authorizeVoter(String _address, String role, String censo) {
        final Function function = new Function(
                FUNC_AUTHORIZEVOTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address), 
                new org.web3j.abi.datatypes.Utf8String(role), 
                new org.web3j.abi.datatypes.Utf8String(censo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>> getAllCandidatesWithVotes() {
        final Function function = new Function(FUNC_GETALLCANDIDATESWITHVOTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>(
                new Callable<Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> StopTimeToVote() {
        final Function function = new Function(
                FUNC_STOPTIMETOVOTE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Voting load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voting(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Voting load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voting(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Voting load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Voting(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Voting load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Voting(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Voting> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _candidate1, String _candidate2, String _candidate3) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_candidate1), 
                new org.web3j.abi.datatypes.Utf8String(_candidate2), 
                new org.web3j.abi.datatypes.Utf8String(_candidate3)));
        return deployRemoteCall(Voting.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Voting> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _candidate1, String _candidate2, String _candidate3) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_candidate1), 
                new org.web3j.abi.datatypes.Utf8String(_candidate2), 
                new org.web3j.abi.datatypes.Utf8String(_candidate3)));
        return deployRemoteCall(Voting.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Voting> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _candidate1, String _candidate2, String _candidate3) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_candidate1), 
                new org.web3j.abi.datatypes.Utf8String(_candidate2), 
                new org.web3j.abi.datatypes.Utf8String(_candidate3)));
        return deployRemoteCall(Voting.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Voting> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _candidate1, String _candidate2, String _candidate3) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_candidate1), 
                new org.web3j.abi.datatypes.Utf8String(_candidate2), 
                new org.web3j.abi.datatypes.Utf8String(_candidate3)));
        return deployRemoteCall(Voting.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
