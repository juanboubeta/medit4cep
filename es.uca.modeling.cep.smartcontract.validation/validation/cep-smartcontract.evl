context SmartContracts {
	constraint HasSmartContractUniqueTypeName {

        check {
        	var smartContracts : OrderedSet = self.smartcontracts;
        
        	if (smartContracts.size() > 1) {
	            for (sc : SmartContract in smartContracts) {
	                if (not (smartContracts.one(c : SmartContract | c.typeName == sc.typeName)))
                    	return false;  
	            }    
            }    
            return true;  
        }

        message : "'SmartContract' typeName must be unique."
    }
}

context SmartContract {
	constraint HasContractName {

	    check : self.typeName.isDefined() and self.typeName.trim().length() > 0
	
	    message : "Attribute 'typeName' must be named."
	    
	    fix {
	        
	    	title : "Set a value for 'name'."
	            
	        do {
	        	var name : String;
	            name = UserInput.prompt("Please enter a value for 'typeName':");
	            self.typeName = name;
	        }
	    }  

  	}
  	
  	constraint HasInputParameterUniqueName {

        check {
                
        	if(self.SmartContractProperties.size() > 0){
	        	for(i in Sequence{1..self.SmartContractProperties.size()}){
	        		if(self.SmartContractProperties.at(i-1).InputParametersFunction.size() > 0){
		        		for(j in Sequence{1..self.SmartContractProperties.at(i-1).InputParametersFunction.size()}){
		        			var counter : Integer = 0;
				        	for(cf : ContractFunction in self.SmartContractProperties){	                    	
				        		for(ip : InputParameter in cf.InputParametersFunction){
				                    if (self.SmartContractProperties.at(i-1).InputParametersFunction.at(j-1).name == ip .name){
				                    	counter++;
				                    	if(counter > 1)
				                    		return false;
				                    }
				           		}
				        	}
			        	}
			        }
		        }
	        }

            return true;  
        }

        message : "'InputParameter' name must be unique."
    } 
  	
  	/*constraint HasOutputParameterUniqueName {

        check {
                
        	if(self.SmartContractProperties.size() > 0){
	        	for(i in Sequence{1..self.SmartContractProperties.size()}){
	        		if(self.SmartContractProperties.at(i-1).OutputParametersFunction.size() > 0){
		        		for(j in Sequence{1..self.SmartContractProperties.at(i-1).OutputParametersFunction.size()}){
		        			var counter : Integer = 0;
				        	for(cf : ContractFunction in self.SmartContractProperties){	
				        		for(op : OutputParameter in cf.OutputParametersFunction){
				                    if (self.SmartContractProperties.at(i-1).OutputParametersFunction.name == op .name){
				                    	counter++;
				                    	if(counter > 1)
				                    		return false;
				                    }
				           		}
				        	}
			        	}
			        }
		        }
	        }

            return true;  
        }

        message : "'OutputParameter' name must be unique."
    }   */
  	
  	/*constraint ExistContract {
    
    	guard : self.satisfies('HasContractName')
    
        check {
        
        	var m : String; 
        	m = "SmartContract '" + self.typeName; 
        	     	
        	if (self.typeName == "Voting" or self.typeName == "Purchase" or self.typeName == "Auction" or self.typeName == "VaccineDelivery") {
        		return true;        	    
        	} else {
        		m = m + "' doesn´t exist in the tool.";
        		return true; 
        	}  
        }

        message : m
      
    } 	*/
    constraint HasPrivateKey {

	    check : self.privateKey.isDefined() and self.privateKey.trim().length() > 0
	
	    message : "Attribute 'privateKey' must be filled."
	    
	    fix {
	        
	    	title : "Set a value for 'privateKey'."
	            
	        do {
	        	var key : String;
	            key = UserInput.prompt("Please enter a value for 'privateKey':");
	            self.privateKey = key;
	        }
	    }  

  	}
}

context ContractFunction {
	constraint HasFunctiontName {

        check : self.name.isDefined() and self.name.trim().length() > 0

        message : 'Function must have a name.'

        fix {
        
            title : "Set a value for 'name'."
            
            do {
                var name : String;
                name = UserInput.prompt("Please enter a value for 'name':");
                self.name = name;
            }
        }      
    } 
    
    constraint HasContractFunctionUniqueName {

        check {
        	var contractFunctions : OrderedSet = self.referencedSmartContract.SmartContractProperties;
        
        	if (contractFunctions.size() > 1) {
	            for (cf : ContractFunction in contractFunctions) {
	                if (not (contractFunctions.one(c : ContractFunction | c.name == cf.name)))
                    	return false;  
	            }    
            }    
            return true;  
        }

        message : "'ContractFunction' name must be unique."
    } 
    
    /*constraint ExistFunction {
    
    	guard : self.satisfies('HasFunctiontName')
    
        check {
        
        	var m : String; 
        	m = "ContractFunction '" + self.name; 
        		     	
        	switch(self.referencedSmartContract.typeName) {
        	case "Voting":
	        	if (self.name == "authorizeVoter" or self.name == "voteForCandidate" or self.name == "getVoteForCandidate" or self.name == "getAllCandidatesWithVotes" or self.name == "getTotalVotes" or self.name == "StartTimeToVote" or self.name == "StopTimeToVote") {
	        		return true;        	    
	        	} else {
	        		m = m + "' doesn´t exist for the SmartContract '" + self.referencedSmartContract.typeName + "'";
	        		return false; 
	        	} 
        		break;
        	case "Purchase":
        		if (self.name == "abort" or self.name == "confirmPurchase" or self.name == "confirmReceived") {
	        		return true;        	    
	        	} else {
	        		m = m + "' doesn´t exist for the SmartContract '" + self.referencedSmartContract.typeName + "'";
	        		return false; 
	        	} 
        		break;
        	case "Auction":
        		if (self.name == "bid" or self.name == "withdraw" or self.name == "auctionEnd") {
	        		return true;        	    
	        	} else {
	        		m = m + "' doesn´t exist for the SmartContract '" + self.referencedSmartContract.typeName + "'";
	        		return false; 
	        	} 
        		break;
        	case "VaccineDelivery":
        		if (self.name == "registerEvent") {
	        		return true;        	    
	        	} else {
	        		m = m + "' doesn´t exist for the SmartContract '" + self.referencedSmartContract.typeName + "'";
	        		return false; 
	        	} 
        		break;
        	default:
        		m = m + "' doesn´t exist in the tool";
        		return true; 
        		break;	
        	} 
        }

        message : m
      
    } */	
}

context Parameter {
	constraint HasParameterName {
    
        check : self.name.isDefined() and self.name.trim().length() > 0

        message : "Parameter must be named."

        fix {
        
            title : "Set a value for 'name'."
            
            do {
                var name : String;
                name = UserInput.prompt("Please enter a value for 'name':");
                self.name = name;
            }
        }      
    }    
         
    constraint HasParameterType {
    
    	guard : self.satisfies('HasParameterName')
    
        check {
        
        	var m : String; 
        	m = "Parameter '" + self.name; 
        	     	
        	if (self.type == PropertyTypeValue#Unknown) {
        		m = m + "' must have a type.";
        		return false;        	    
        	} else {
        		return true; 
        	}  
        }

        message : m
      
    }
    
    /*constraint HasCorrectType {
    
    	guard : self.satisfies('HasParameterType')
    
      	check {
        
        	var m : String; 
        	m = "Parameter '"; 
        	
        	if(self.isKindOf(InputParameter)){	     	
	        	switch(self.InputReferencedFunction.referencedSmartContract.typeName) {
	        	case "Voting":
			        switch(self.InputReferencedFunction.name) {	
				    	case "authorizeVoter":
				    		if (self.name == "_address" or self.name == "role" or self.name == "censo") {
				        		if (self.type == PropertyTypeValue#String) {
				        		return true;        	    
					        	} else {
					        		m = m + self.name + "' doesn´t have the correct type for the ContractFunction '" + self.InputReferencedFunction.name + "'";
					        		return false; 
					        	}       	    
				        	} else {
				        		m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				        	} 
				    		
				    		break;
				    	case "voteForCandidate":
				    		if (self.name == "_index") {
				        		if (self.type == PropertyTypeValue#Integer) {
				        		return true;        	    
					        	} else {
					        		m = m + self.name + "' doesn´t have the correct type for the ContractFunction '" + self.InputReferencedFunction.name + "'";
					        		return false; 
					        	}         	    
				        	} else {
				        		m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				        	} 
				    		break;
				    	case "getVoteForCandidate":
				    		if (self.name == "_index") {
				        		if (self.type == PropertyTypeValue#Integer) {
				        		return true;        	    
					        	} else {
					        		m = m + self.name + "' doesn´t have the correct type for the ContractFunction '" + self.InputReferencedFunction.name + "'";
					        		return false; 
					        	}         	    
				        	} else {
				        		m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				        	} 
				    		break;
				    	case "getAllCandidatesWithVotes":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	case "getTotalVotes":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	case "StartTimeToVote":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	case "StopTimeToVote":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	default:
				    		m = m + self.name + "' doesn´t exist";
				    		break;
				    }
	        		break;
	        	case "Purchase":
	        		switch(self.InputReferencedFunction.name) {	
				    	case "abort":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	case "confirmPurchase":
				    		if (self.name == "purchaseValue") {
				        		if (self.type == PropertyTypeValue#Integer) {
				        		return true;        	    
					        	} else {
					        		m = m + self.name + "' doesn´t have the correct type for the ContractFunction '" + self.InputReferencedFunction.name + "'";
					        		return false; 
					        	}         	    
				        	} else {
				        		m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				        	} 
				    		break;
				    	case "confirmReceived":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	default:
				    		m = m + self.name + "' doesn´t exist";
				    		break;
				    }
	        		break;
	        	case "Auction":
	        		switch(self.InputReferencedFunction.name) {	
				    	case "bid":
				    		if (self.name == "bidValue") {
				        		if (self.type == PropertyTypeValue#Integer) {
				        			return true;        	    
					        	} else {
					        		m = m + self.name + "' doesn´t have the correct type for the ContractFunction '" + self.InputReferencedFunction.name + "'";
					        		return false; 
					        	}         	    
				        	} else {
				        		m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				        	} 
				    		break;
				    	case "withdraw":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				  			
				    		break;
				    	case "auctionEnd":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	default:
				    		m = m + self.name + "' doesn´t exist";
				    		break;
				    }
	        		break;
	        	case "VaccineDelivery":
			        switch(self.InputReferencedFunction.name) {	
				    	case "registerEvent":
				    		if (self.name == "eventName" or self.name == "eventInfo") {
				        		if (self.type == PropertyTypeValue#String) {
				        		return true;        	    
					        	} else {
					        		m = m + self.name + "' doesn´t have the correct type for the ContractFunction '" + self.InputReferencedFunction.name + "'";
					        		return false; 
					        	}       	    
				        	} else {
				        		m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.InputReferencedFunction.name + "'";
				        		return false; 
				        	} 
				    		
				    		break;
				    	default:
				    		m = m + self.name + "' doesn´t exist";
				    		break;
				    }
	        		break;
	        	default:
	        		m = m + "' doesn´t exist in the tool.";
	        		return true; 
	        		break;	
	        	} 
	        } else {
	        	switch(self.OutputReferencedFunction.referencedSmartContract.typeName) {
	        	case "Voting":
			        switch(self.OutputReferencedFunction.name) {	
				    	case "authorizeVoter":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}				    		
				    		break;
				    	case "voteForCandidate":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	case "getVoteForCandidate":
				    		if (self.name == "votes") {
				        		if (self.type == PropertyTypeValue#Integer) {
				        		return true;        	    
					        	} else {
					        		m = m + self.name + "' doesn´t have the correct type for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
					        		return false; 
					        	}         	    
				        	} else {
				        		m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				        	} 
				    		break;
				    	case "getAllCandidatesWithVotes":
				    		if (self.name == "CandidatesWithVotes") {
				        		if (self.type == PropertyTypeValue#String) {
				        		return true;        	    
					        	} else {
					        		m = m + self.name + "' doesn´t have the correct type for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
					        		return false; 
					        	}         	    
				        	} else {
				        		m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				        	} 
				    		break;
				    	case "getTotalVotes":
				    		if (self.name == "TotalVotes") {
				        		if (self.type == PropertyTypeValue#String) {
				        		return true;        	    
					        	} else {
					        		m = m + self.name + "' doesn´t have the correct type for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
					        		return false; 
					        	}         	    
				        	} else {
				        		m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				        	} 
				    	break;
				    	case "StartTimeToVote":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}				    		
				    		break;
				    	case "StopTimeToVote":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}				    		
				    		break;
				    	default:
				    		m = m + self.name + "' doesn´t exist";
				    		break;
				    }
	        		break;
	        	case "Purchase":
	        		switch(self.OutputReferencedFunction.name) {	
				    	case "abort":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	case "confirmPurchase":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	case "confirmReceived":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	default:
				    		m = m + self.name + "' doesn´t exist";
				    		break;
				    }
	        		break;
	        	case "Auction":
	        		switch(self.OutputReferencedFunction.name) {	
				    	case "bid":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    		break;
				    	case "withdraw":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    		break;
				    	case "auctionEnd":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    		break;
				    	default:
				    		m = m + self.name + "' doesn´t exist";
				    		break;
				    }
	        		break;
	        	case "VaccineDelivery":
	        		switch(self.OutputReferencedFunction.name) {	
				    	case "registerEvent":
				    		if(self.name.isDefined()){
				    			m = m + self.name + "' doesn´t exist for the ContractFunction '" + self.OutputReferencedFunction.name + "'";
				        		return false; 
				    		} else {
				    			return true;
				    		}
				    		break;
				    	default:
				    		m = m + self.name + "' doesn´t exist";
				    		break;
				    }
	        		break;
	        	default:
	        		m = m + "' doesn´t exist in the tool.";
	        		return true; 
	        		break;	
	        	} 
	        }
        }

        message : m
    }*/
}

context InputParameter {

	/*constraint HasValue {

	    check : self.value.isDefined() and self.value.trim().length() > 0
	
	    message : "Attribute 'Value' must be defined."
	    
	    fix {
	        
	    	title : "Set a value."
	            
	        do {
	        	var entervalue : String;
	            entervalue = UserInput.prompt("Please enter a value:");
	            self.value = entervalue;
	        }
	    }  

  	}*/

	constraint HasInputParameterUniqueName {

        check {
        	var inputParameters : OrderedSet = self.InputReferencedFunction.InputParametersFunction;
        
        	if (inputParameters.size() > 1) {
	            for (ip : InputParameter in inputParameters) {
	                if (not (inputParameters.one(c : InputParameter | c.name == ip.name)))
                    	return false;  
	            }    
            }    
            return true;  
        }

        message : "'InputParameter' name must be unique."
    } 
}

context OutputParameter {
	constraint HasOutputParameterUniqueName {

        check {
                
        	if(self.OutputReferencedFunction.referencedSmartContract.SmartContractProperties.size() > 0){
	        	for(i in Sequence{1..self.OutputReferencedFunction.referencedSmartContract.SmartContractProperties.size()}){
	        		if(self.OutputReferencedFunction.referencedSmartContract.SmartContractProperties.at(i-1).OutputParametersFunction.size() > 0){
		        		for(j in Sequence{1..self.OutputReferencedFunction.referencedSmartContract.SmartContractProperties.at(i-1).OutputParametersFunction.size()}){
		        			var counter : Integer = 0;
				        	for(cf : ContractFunction in self.OutputReferencedFunction.referencedSmartContract.SmartContractProperties){	
				        		for(op : OutputParameter in cf.OutputParametersFunction){
				                    if (self.name == op.name){
				                    	counter++;
				                    	if(counter > 1)
				                    		return false;
				                    }
				           		}
				        	}
			        	}
			        }
		        }
	        }

            return true;  
        }

        message : "'OutputParameter' name must be unique."
    }  
}