[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.Configuration id -220881974438617882 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.util.ArrayList id 8683452581122892189 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.util.HashMap id 362498820763181265 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults id -528835191586154300 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$AlternativeContext id 4488861684585251042 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$ByteCodeGeneration id -4582655217918634675 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$ConditionHandling id -708367341332718634 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$EventMeta id -6091772368103140370 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$EventMeta$AvroSettings id 2977645210525767203 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.Configuration$PropertyResolutionStyle id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.lang.Enum id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEventTypeLegacy$AccessorStyle id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.util.EventUnderlyingType id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$ExceptionHandling id -708367341332718634 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$ExceptionHandling$UndeployRethrowPolicy id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$Execution id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$FilterServiceProfile id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$ThreadingProfile id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$Expression id 3192205923560011213 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class sun.util.calendar.ZoneInfo id 2653134537216586139 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.util.TimeZone id 3581463369166924961 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class [I id 5600894804908749477 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class [J id 8655923659555304851 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$Language id -6237674558477894392 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$Logging id -8129836306582810327 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$MatchRecognize id 4541565245238216789 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationMetricsReporting id -7265780298667075895 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.util.LinkedHashMap id 3801124242820219131 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$Patterns id -7596853289989573800 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$Scripts id -3111856398932434323 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$StreamSelection id -7943748323859161674 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.soda.StreamSelector id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$Threading id 6504606101119059962 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$Threading$Locking id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$TimeSource id 2075039404763313824 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$TimeSourceType id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.util.concurrent.TimeUnit id 0 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$Variables id 8276015152830052323 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class com.espertech.esper.client.ConfigurationEngineDefaults$ViewResources id 2527853225433208362 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.util.LinkedHashSet id -2851667679971038690 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.util.HashSet id -5024744406713321676 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.lang.String id -6849794470754667710 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.lang.Double id -9172774392245257468 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.lang.Number id -8742448824652078965 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST] DEBUG [ObjectInputStreamWithTCCL][resolveClass]: Resolving class java.lang.Long id 4290774380558885855 classloader class sun.misc.Launcher$AppClassLoader
[22/05/20 06:52:22:022 CEST]  INFO [EPServiceProviderImpl][doInitialize]: Initializing engine URI 'default' version 7.1.0
[22/05/20 06:52:22:022 CEST] DEBUG [MetricReportingPath][setMetricsEnabled]: Metrics reporting has been disabled, this setting takes affect for all engine instances at engine initialization time.
[22/05/20 06:52:22:022 CEST] DEBUG [EngineImportServiceImpl][validateImportAndAdd]: Adding import java.lang.*
[22/05/20 06:52:22:022 CEST] DEBUG [EngineImportServiceImpl][validateImportAndAdd]: Adding import java.math.*
[22/05/20 06:52:22:022 CEST] DEBUG [EngineImportServiceImpl][validateImportAndAdd]: Adding import java.text.*
[22/05/20 06:52:22:022 CEST] DEBUG [EngineImportServiceImpl][validateImportAndAdd]: Adding import java.util.*
[22/05/20 06:52:22:022 CEST] DEBUG [EngineImportServiceImpl][validateImportAndAdd]: Adding import com.espertech.esper.client.annotation.*
[22/05/20 06:52:22:022 CEST] DEBUG [EngineImportServiceImpl][validateImportAndAdd]: Adding import com.espertech.esper.dataflow.ops.*
[22/05/20 06:52:22:022 CEST] DEBUG [EPServicesContextFactoryDefault][createServicesContext]: Avro provider com.espertech.esper.avro.core.EventAdapterAvroHandlerImpl not instantiated, not enabling Avro support: Unable to load class 'com.espertech.esper.avro.core.EventAdapterAvroHandlerImpl', class not found
[22/05/20 06:52:22:022 CEST]  WARN [TimerServiceImpl][stopInternalClock]: .stopInternalClock Internal clock is already stopped, start first before stopping, operation not completed
[22/05/20 06:52:22:022 CEST] DEBUG [EPAdministratorHelper][compileEPL]: .createEPLStmt statementName=null eplStatement=@Name("TemperatureWarning")
@Tag(name="domainName", value="VaccineDeliveyr")
insert into TemperatureWarning
select a1.*
from pattern [(every a1 = TemperatureReading((a1.temperature < 2.0 or a1.temperature > 8.0)))]
[22/05/20 06:52:22:022 CEST] DEBUG [ParseHelper][parse]: .parse Parsing expr=@Name("TemperatureWarning")
@Tag(name="domainName", value="VaccineDeliveyr")
insert into TemperatureWarning
select a1.*
from pattern [(every a1 = TemperatureReading((a1.temperature < 2.0 or a1.temperature > 8.0)))]
[22/05/20 06:52:23:023 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:23:023 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:23:023 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:23:023 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:23:023 CEST] DEBUG [ParseHelper][parse]: .parse Dumping AST...
[22/05/20 06:52:23:023 CEST] DEBUG [ParseHelper][walk]: .walk Walking AST using walker com.espertech.esper.epl.parse.EPLTreeWalkerListener
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][resolveClassInternal]: Class not found for resolving from name as-is 'Name'
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.lang.Name'
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.math.Name'
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.text.Name'
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.util.Name'
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][resolveClassInternal]: Class not found for resolving from name as-is 'Tag'
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.lang.Tag'
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.math.Tag'
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.text.Tag'
[22/05/20 06:52:23:023 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.util.Tag'
[22/05/20 06:52:23:023 CEST] DEBUG [StatementResultServiceImpl][<init>]: .ctor
[22/05/20 06:52:23:023 CEST] DEBUG [FilterSpecCompiler][buildNoStmtCtx]: .makeFilterSpec spec=FilterSpecCompiled type=com.espertech.esper.event.map.MapEventType@6b8d96d9 parameters=[[Lcom.espertech.esper.filterspec.FilterSpecParam;@69653e16, [Lcom.espertech.esper.filterspec.FilterSpecParam;@758705fa]
[22/05/20 06:52:23:023 CEST] DEBUG [StatementLifecycleSvcImpl][start]: .start Starting statement 1 from desc=com.espertech.esper.core.service.StatementLifecycleSvcImpl$EPStatementDesc@35d08e6c
[22/05/20 06:52:23:023 CEST] DEBUG [StatementLifecycleSvcImpl][startInternal]: .startInternal Starting statement 1 from desc=com.espertech.esper.core.service.StatementLifecycleSvcImpl$EPStatementDesc@35d08e6c
[22/05/20 06:52:23:023 CEST] DEBUG [ViewServiceHelper][addMergeViews]: .addMergeViews Incoming specifications=[]
[22/05/20 06:52:23:023 CEST] DEBUG [ViewServiceHelper][addMergeViews]: .addMergeViews Outgoing specifications=[]
[22/05/20 06:52:23:023 CEST] DEBUG [OrderByProcessorFactoryFactory][getProcessor]: .getProcessor Using no OrderByProcessor
[22/05/20 06:52:23:023 CEST] DEBUG [ResultSetProcessorFactoryFactory][getProcessorPrototype]: .getProcessor Using no result processor
[22/05/20 06:52:24:024 CEST] DEBUG [CodegenCompilerJanino][compileClass]: Compiling class for statement 'TemperatureWarning' result-set-processor requestor-class 'ResultSetProcessorFactoryFactory' includeDebugSymbols=false classloader=sun.misc.Launcher$AppClassLoader@1d44bcfa code: 
   1  package com.espertech.esper.generated.uri_default;
   2  import com.espertech.esper.epl.core.resultset.handthru.ResultSetProcessorHandThroughUtil;
   3  import com.espertech.esper.epl.core.orderby.OrderByProcessor;
   4  import java.util.List;
   5  import com.espertech.esper.event.WrapperEventType;
   6  import com.espertech.esper.epl.agg.service.common.AggregationRowRemovedCallback;
   7  import com.espertech.esper.epl.core.engineimport.EngineImportService;
   8  import com.espertech.esper.epl.core.select.SelectExprProcessor;
   9  import com.espertech.esper.client.EventBean;
  10  import com.espertech.esper.view.Viewable;
  11  import java.util.HashMap;
  12  import com.espertech.esper.event.EventAdapterServiceImpl;
  13  import java.util.Map;
  14  import java.util.Iterator;
  15  import com.espertech.esper.core.context.util.AgentInstanceContext;
  16  import com.espertech.esper.epl.agg.service.common.AggregationServiceVisitor;
  17  import com.espertech.esper.client.EventType;
  18  import com.espertech.esper.collection.TransformEventIterator;
  19  import com.espertech.esper.epl.agg.service.common.AggregationServiceVisitorWGroupDetail;
  20  import com.espertech.esper.epl.core.resultset.codegen.ResultSetProcessorFactoryProvider;
  21  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessorOutputHelperVisitor;
  22  import com.espertech.esper.epl.agg.service.common.AggregationServiceNull;
  23  import com.espertech.esper.epl.agg.service.common.AggregationGroupByRollupLevel;
  24  import java.util.Set;
  25  import com.espertech.esper.event.NaturalEventBean;
  26  import com.espertech.esper.epl.agg.service.common.AggregationService;
  27  import com.espertech.esper.core.service.StatementResultServiceImpl;
  28  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessor;
  29  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessorFactory;
  30  import java.util.Collection;
  31  import com.espertech.esper.epl.core.resultset.handthru.ResultSetProcessorHandtruTransform;
  32  import com.espertech.esper.epl.core.orderby.OrderByProcessorFactory;
  33  import com.espertech.esper.epl.agg.service.common.AggregationServiceFactory;
  34  import com.espertech.esper.collection.UniformPair;
  35  import com.espertech.esper.epl.expression.core.ExprEvaluatorContext;
  36  public class ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 implements ResultSetProcessorFactoryProvider {
  37    final WrapperEventType mb0;
  38    final EventAdapterServiceImpl mb1;
  39    final StatementResultServiceImpl mb2;
  40    final ResultSetProcessorFactory rspFactory;
  41    final OrderByProcessorFactory orderByFactory;
  42    final AggregationServiceFactory aggFactory;
  43    final SelectExprProcessor selectExprProcessor;
  44  
  45    public ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2(WrapperEventType p0,EventAdapterServiceImpl p1,StatementResultServiceImpl p2){
  46      this.mb0=p0;
  47      this.mb1=p1;
  48      this.mb2=p2;
  49      rspFactory=new RSPFactory(this);
  50      orderByFactory=null;
  51      aggFactory=new AggFactory(this);
  52      selectExprProcessor=new SelectExprProcessorImpl(this);
  53    }
  54  
  55    // ResultSetProcessorHandThroughFactoryForge
  56    public ResultSetProcessorFactory getResultSetProcessorFactory(){
  57      return rspFactory;
  58    }
  59  
  60    // ResultSetProcessorHandThroughFactoryForge
  61    public AggregationServiceFactory getAggregationServiceFactory(){
  62      return aggFactory;
  63    }
  64  
  65    // ResultSetProcessorHandThroughFactoryForge
  66    public OrderByProcessorFactory getOrderByProcessorFactory(){
  67      return orderByFactory;
  68    }
  69  
  70    static class RSPFactory implements ResultSetProcessorFactory {
  71      final ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o;
  72  
  73      public RSPFactory(ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o){
  74        this.o=o;
  75      }
  76  
  77      // ResultSetProcessorFactoryCompiler
  78      public ResultSetProcessor instantiate(OrderByProcessor orderByProcessor,AggregationService aggregationService,AgentInstanceContext agentInstanceContext){
  79        return new RSP(o,orderByProcessor,aggregationService,agentInstanceContext);
  80      }
  81    }
  82  
  83    static class RSP implements ResultSetProcessor {
  84      final ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o;
  85      final OrderByProcessor orderByProcessor;
  86      final AggregationService aggregationService;
  87      final AgentInstanceContext agentInstanceContext;
  88  
  89      public RSP(ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o,OrderByProcessor orderByProcessor,AggregationService aggregationService,AgentInstanceContext agentInstanceContext){
  90        this.o=o;
  91        this.orderByProcessor=orderByProcessor;
  92        this.aggregationService=aggregationService;
  93        this.agentInstanceContext=agentInstanceContext;
  94      }
  95  
  96      // ResultSetProcessorHandThroughFactoryForge
  97      public EventType getResultEventType(){
  98        return o.mb0;
  99      }
 100  
 101      // ResultSetProcessorHandThroughFactoryForge
 102      public UniformPair processViewResult(EventBean[] newData,EventBean[] oldData,boolean isSynthesize){
 103        EventBean[] selectOldEvents=null;
 104        EventBean[] selectNewEvents=ResultSetProcessorHandThroughUtil.getSelectEventsNoHavingHandThruView(o.selectExprProcessor,newData,true,isSynthesize,agentInstanceContext);
 105        return new UniformPair(selectNewEvents,selectOldEvents);
 106      }
 107  
 108      // ResultSetProcessorHandThroughFactoryForge
 109      public UniformPair processJoinResult(Set newData,Set oldData,boolean isSynthesize){
 110        throw new UnsupportedOperationException();
 111      }
 112  
 113      // ResultSetProcessorHandThroughFactoryForge
 114      public Iterator getIterator(Viewable viewable){
 115        return new TransformEventIterator(viewable.iterator(),new ResultSetProcessorHandtruTransform(this));
 116      }
 117  
 118      // ResultSetProcessorHandThroughFactoryForge
 119      public Iterator getIterator(Set joinset){
 120        throw new UnsupportedOperationException();
 121      }
 122  
 123      // ResultSetProcessorHandThroughFactoryForge
 124      public void clear(){
 125      }
 126  
 127      // ResultSetProcessorHandThroughFactoryForge
 128      public void stop(){
 129      }
 130  
 131      // ResultSetProcessorHandThroughFactoryForge
 132      public UniformPair processOutputLimitedJoin(List joinEventsSet,boolean isSynthesize){
 133        throw new UnsupportedOperationException();
 134      }
 135  
 136      // ResultSetProcessorHandThroughFactoryForge
 137      public UniformPair processOutputLimitedView(List viewEventsList,boolean isSynthesize){
 138        throw new UnsupportedOperationException();
 139      }
 140  
 141      // ResultSetProcessorHandThroughFactoryForge
 142      public void setAgentInstanceContext(AgentInstanceContext context){
 143        throw new UnsupportedOperationException();
 144      }
 145  
 146      // ResultSetProcessorHandThroughFactoryForge
 147      public void applyViewResult(EventBean[] newData,EventBean[] oldData){
 148        throw new UnsupportedOperationException();
 149      }
 150  
 151      // ResultSetProcessorHandThroughFactoryForge
 152      public void applyJoinResult(Set newData,Set oldData){
 153        throw new UnsupportedOperationException();
 154      }
 155  
 156      // ResultSetProcessorHandThroughFactoryForge
 157      public void processOutputLimitedLastAllNonBufferedView(EventBean[] newData,EventBean[] oldData,boolean isSynthesize){
 158        throw new UnsupportedOperationException();
 159      }
 160  
 161      // ResultSetProcessorHandThroughFactoryForge
 162      public void processOutputLimitedLastAllNonBufferedJoin(Set newData,Set oldData,boolean isSynthesize){
 163        throw new UnsupportedOperationException();
 164      }
 165  
 166      // ResultSetProcessorHandThroughFactoryForge
 167      public UniformPair continueOutputLimitedLastAllNonBufferedView(boolean isSynthesize){
 168        throw new UnsupportedOperationException();
 169      }
 170  
 171      // ResultSetProcessorHandThroughFactoryForge
 172      public UniformPair continueOutputLimitedLastAllNonBufferedJoin(boolean isSynthesize){
 173        throw new UnsupportedOperationException();
 174      }
 175  
 176      // ResultSetProcessorHandThroughFactoryForge
 177      public void acceptHelperVisitor(ResultSetProcessorOutputHelperVisitor visitor){
 178      }
 179    }
 180  
 181    static class AggFactory implements AggregationServiceFactory {
 182      final ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o;
 183  
 184      public AggFactory(ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o){
 185        this.o=o;
 186      }
 187  
 188      // AggregationServiceFactoryCompiler
 189      public AggregationService makeService(AgentInstanceContext agentInstanceContext,EngineImportService engineImportService,boolean isSubquery,Integer subqueryNumber){
 190        return AggregationServiceNull.INSTANCE;
 191      }
 192    }
 193  
 194    static class AggSvc implements AggregationService {
 195      final ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o;
 196  
 197      public AggSvc(ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o){
 198        this.o=o;
 199      }
 200  
 201      // AggregationServiceNullFactory
 202      public void applyEnter(EventBean[] eventsPerStream,Object groupKey,ExprEvaluatorContext exprEvalCtx){
 203      }
 204  
 205      // AggregationServiceNullFactory
 206      public void applyLeave(EventBean[] eventsPerStream,Object groupKey,ExprEvaluatorContext exprEvalCtx){
 207      }
 208  
 209      // AggregationServiceNullFactory
 210      public void setCurrentAccess(Object groupKey,int agentInstanceId,AggregationGroupByRollupLevel rollupLevel){
 211      }
 212  
 213      // AggregationServiceNullFactory
 214      public void clearResults(ExprEvaluatorContext exprEvalCtx){
 215      }
 216  
 217      // AggregationServiceNullFactory
 218      public void setRemovedCallback(AggregationRowRemovedCallback callback){
 219      }
 220  
 221      // AggregationServiceNullFactory
 222      public void accept(AggregationServiceVisitor visitor){
 223      }
 224  
 225      // AggregationServiceNullFactory
 226      public void acceptGroupDetail(AggregationServiceVisitorWGroupDetail visitor){
 227      }
 228  
 229      // AggregationServiceNullFactory
 230      public boolean isGrouped(){
 231        return false;
 232      }
 233  
 234      // AggregationServiceNullFactory
 235      public AggregationService getContextPartitionAggregationService(int agentInstanceId){
 236        return this;
 237      }
 238  
 239      // AggregationServiceNullFactory
 240      public Object getValue(int column,int agentInstanceId,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 241        return null;
 242      }
 243  
 244      // AggregationServiceNullFactory
 245      public Collection getCollectionOfEvents(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 246        return null;
 247      }
 248  
 249      // AggregationServiceNullFactory
 250      public EventBean getEventBean(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 251        return null;
 252      }
 253  
 254      // AggregationServiceNullFactory
 255      public Object getGroupKey(int agentInstanceId){
 256        return null;
 257      }
 258  
 259      // AggregationServiceNullFactory
 260      public Collection getGroupKeys(ExprEvaluatorContext exprEvalCtx){
 261        return null;
 262      }
 263  
 264      // AggregationServiceNullFactory
 265      public Collection getCollectionScalar(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 266        return null;
 267      }
 268  
 269      // AggregationServiceNullFactory
 270      public void stop(){
 271      }
 272    }
 273  
 274    static class SelectExprProcessorImpl implements SelectExprProcessor {
 275      final ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o;
 276  
 277      public SelectExprProcessorImpl(ResultSetProcessorFactoryProvider_c759fcf80b9b048d9b914443acfa3e1a2 o){
 278        this.o=o;
 279      }
 280  
 281      // SelectExprProcessorCompiler
 282      public EventBean process(EventBean[] eventsPerStream,boolean isNewData,boolean isSynthesize,ExprEvaluatorContext exprEvalCtx){
 283        return m0(eventsPerStream,exprEvalCtx,isNewData,isSynthesize);
 284      }
 285  
 286      // SelectExprResultProcessor
 287      EventBean m0(EventBean[] eventsPerStream,ExprEvaluatorContext exprEvalCtx,boolean isNewData,boolean isSynthesize){
 288        boolean makeNatural=(o.mb2).isMakeNatural();
 289        boolean synthesize=(o.mb2).isMakeSynthetic()||isSynthesize;
 290        if (!(makeNatural)) {
 291          if (synthesize) {
 292            return m1(eventsPerStream,exprEvalCtx,isNewData);
 293          }
 294          return null;
 295        }
 296        EventBean syntheticEvent=null;
 297        if (synthesize) {
 298          syntheticEvent=m1(eventsPerStream,exprEvalCtx,isNewData);
 299        }
 300        Object[] parameters=m3(eventsPerStream);
 301        return new NaturalEventBean(o.mb0,parameters,syntheticEvent);
 302      }
 303  
 304      // EvalSelectStreamWUnderlying
 305      EventBean m1(EventBean[] eventsPerStream,ExprEvaluatorContext exprEvalCtx,boolean isNewData){
 306        Map props=new HashMap(1);
 307        return m2(props,eventsPerStream,exprEvalCtx,isNewData);
 308      }
 309  
 310      // EvalSelectStreamWUnderlying
 311      EventBean m2(Map props,EventBean[] eventsPerStream,ExprEvaluatorContext exprEvalCtx,boolean isNewData){
 312        EventBean eventBean=eventsPerStream[0];
 313        EventBean theEvent=((EventBean)(((Map)eventBean.getUnderlying())).get("a1"));
 314        return (o.mb1).adapterForTypedWrapper(theEvent,props,o.mb0);
 315      }
 316  
 317      // BindProcessor
 318      Object[] m3(EventBean[] eventsPerStream){
 319        Object[] parameters=new Object[1];
 320        parameters[0]=m4(eventsPerStream);
 321        return parameters;
 322      }
 323  
 324      // BindProcessorStream
 325      Map m4(EventBean[] eventsPerStream){
 326        EventBean event=eventsPerStream[0];
 327        if (event == null) {return null;}
 328        return ((Map)event.getUnderlying());
 329      }
 330    }
 331  }

[22/05/20 06:52:24:024 CEST] DEBUG [ViewServiceImpl][createViews]: .createView No new views created, dumping stream ... com.espertech.esper.view.ZeroDepthStreamNoIterate@290b1b2e
[22/05/20 06:52:24:024 CEST] DEBUG [NamedWindowConsumerMgmtServiceImpl][start]: Statement 'TemperatureWarning starts consuming
[22/05/20 06:52:24:024 CEST] DEBUG [EPAdministratorImpl][createEPLStmt]: .createEPLStmt Statement created and started
[22/05/20 06:52:24:024 CEST] DEBUG [StatementLifecycleSvcImpl][updatedListeners]: .updatedListeners No action for base implementation
[22/05/20 06:52:24:024 CEST] DEBUG [EPAdministratorHelper][compileEPL]: .createEPLStmt statementName=null eplStatement=@Name("TemperatureWarningStatic")
@Tag(name="domainName", value="VaccineDeliveyr")
insert into TemperatureWarningStatic
select 1 as timestamp, 
   a1.shipmentId as shipmentId, 
   count(a1.timestamp) as count, 
   max(a1.temperature) as max, 
    min(a1.temperature) as min
from pattern [(every a1 = TemperatureWarning)].win:time(1 hours)
group by a1.shipmentId
[22/05/20 06:52:24:024 CEST] DEBUG [ParseHelper][parse]: .parse Parsing expr=@Name("TemperatureWarningStatic")
@Tag(name="domainName", value="VaccineDeliveyr")
insert into TemperatureWarningStatic
select 1 as timestamp, 
   a1.shipmentId as shipmentId, 
   count(a1.timestamp) as count, 
   max(a1.temperature) as max, 
    min(a1.temperature) as min
from pattern [(every a1 = TemperatureWarning)].win:time(1 hours)
group by a1.shipmentId
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:24:024 CEST] DEBUG [ParseHelper][parse]: .parse Dumping AST...
[22/05/20 06:52:24:024 CEST] DEBUG [ParseHelper][walk]: .walk Walking AST using walker com.espertech.esper.epl.parse.EPLTreeWalkerListener
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][resolveClassInternal]: Class not found for resolving from name as-is 'Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.lang.Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.math.Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.text.Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.util.Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][resolveClassInternal]: Class not found for resolving from name as-is 'Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.lang.Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.math.Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.text.Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.util.Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [StatementResultServiceImpl][<init>]: .ctor
[22/05/20 06:52:24:024 CEST] DEBUG [FilterSpecCompiler][buildNoStmtCtx]: .makeFilterSpec spec=FilterSpecCompiled type=WrapperEventType underlyingEventType=com.espertech.esper.event.map.MapEventType@6b8d96d9 underlyingMapType=com.espertech.esper.event.map.MapEventType@cda0432 parameters=[]
[22/05/20 06:52:24:024 CEST] DEBUG [StatementLifecycleSvcImpl][start]: .start Starting statement 2 from desc=com.espertech.esper.core.service.StatementLifecycleSvcImpl$EPStatementDesc@2d84cb86
[22/05/20 06:52:24:024 CEST] DEBUG [StatementLifecycleSvcImpl][startInternal]: .startInternal Starting statement 2 from desc=com.espertech.esper.core.service.StatementLifecycleSvcImpl$EPStatementDesc@2d84cb86
[22/05/20 06:52:24:024 CEST] DEBUG [ViewServiceHelper][addMergeViews]: .addMergeViews Incoming specifications=[objectName=time  objectParameters=( 1 hours)]
[22/05/20 06:52:24:024 CEST] DEBUG [ViewServiceHelper][addMergeViews]: .addMergeViews Outgoing specifications=[objectName=time  objectParameters=( 1 hours)]
[22/05/20 06:52:24:024 CEST] DEBUG [ViewResolutionServiceImpl][create]: .create Creating view factory, namespace=win name=time
[22/05/20 06:52:24:024 CEST] DEBUG [ViewResolutionServiceImpl][create]: .create Successfully instantiated view
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][resolveClassInternal]: Class not found for resolving from name as-is 'TemperatureWarningStatic'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.lang.TemperatureWarningStatic'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.math.TemperatureWarningStatic'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.text.TemperatureWarningStatic'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.util.TemperatureWarningStatic'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'com.espertech.esper.client.annotation.TemperatureWarningStatic'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'com.espertech.esper.dataflow.ops.TemperatureWarningStatic'
[22/05/20 06:52:24:024 CEST] DEBUG [SelectExprProcessorHelper][getForge]: Target stream name 'TemperatureWarningStatic' is not resolved as a class name
[22/05/20 06:52:24:024 CEST] DEBUG [OrderByProcessorFactoryFactory][getProcessor]: .getProcessor Using no OrderByProcessor
[22/05/20 06:52:24:024 CEST] DEBUG [ResultSetProcessorFactoryFactory][getProcessorPrototype]: .getProcessor Using ResultSetProcessorRowPerGroup
[22/05/20 06:52:24:024 CEST] DEBUG [CodegenCompilerJanino][compileClass]: Compiling class for statement 'TemperatureWarningStatic' result-set-processor requestor-class 'ResultSetProcessorFactoryFactory' includeDebugSymbols=false classloader=sun.misc.Launcher$AppClassLoader@1d44bcfa code: 
   1  package com.espertech.esper.generated.uri_default;
   2  import java.util.Objects;
   3  import com.espertech.esper.epl.core.orderby.OrderByProcessor;
   4  import java.util.List;
   5  import com.espertech.esper.collection.SortedRefCountedSet;
   6  import com.espertech.esper.epl.core.resultset.rowpergroup.ResultSetProcessorRowPerGroupIterator;
   7  import com.espertech.esper.epl.agg.service.common.AggregationRowRemovedCallback;
   8  import com.espertech.esper.epl.core.engineimport.EngineImportService;
   9  import com.espertech.esper.event.DecoratingEventBean;
  10  import java.util.ArrayList;
  11  import com.espertech.esper.event.map.MapEventType;
  12  import com.espertech.esper.epl.core.select.SelectExprProcessor;
  13  import com.espertech.esper.client.EventBean;
  14  import com.espertech.esper.epl.core.resultset.grouped.ResultSetProcessorGroupedUtil;
  15  import com.espertech.esper.view.Viewable;
  16  import java.util.HashMap;
  17  import com.espertech.esper.event.EventAdapterServiceImpl;
  18  import com.espertech.esper.epl.expression.methodagg.ExprCountNode;
  19  import java.util.Map;
  20  import java.util.Iterator;
  21  import com.espertech.esper.core.context.util.AgentInstanceContext;
  22  import com.espertech.esper.epl.agg.service.common.AggregationServiceVisitor;
  23  import com.espertech.esper.epl.core.resultset.rowpergroup.ResultSetProcessorRowPerGroup;
  24  import com.espertech.esper.client.EventType;
  25  import com.espertech.esper.epl.agg.service.common.AggregationServiceVisitorWGroupDetail;
  26  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessorOutputHelperVisitor;
  27  import com.espertech.esper.epl.core.resultset.codegen.ResultSetProcessorFactoryProvider;
  28  import com.espertech.esper.epl.agg.service.common.AggregationGroupByRollupLevel;
  29  import com.espertech.esper.util.CollectionUtil;
  30  import java.util.Set;
  31  import com.espertech.esper.epl.expression.methodagg.ExprMinMaxAggrNode;
  32  import com.espertech.esper.event.NaturalEventBean;
  33  import com.espertech.esper.epl.agg.service.common.AggregationService;
  34  import com.espertech.esper.core.service.StatementResultServiceImpl;
  35  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessor;
  36  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessorUtil;
  37  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessorFactory;
  38  import java.util.Collection;
  39  import com.espertech.esper.epl.agg.codegen.AggregationRowGenerated;
  40  import com.espertech.esper.epl.core.orderby.OrderByProcessorFactory;
  41  import com.espertech.esper.epl.agg.service.common.AggregationServiceFactory;
  42  import com.espertech.esper.collection.UniformPair;
  43  import com.espertech.esper.epl.expression.core.ExprEvaluatorContext;
  44  public class ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f implements ResultSetProcessorFactoryProvider {
  45    final MapEventType mb0;
  46    final ExprMinMaxAggrNode mb4;
  47    final ExprCountNode mb2;
  48    final ExprMinMaxAggrNode mb3;
  49    final StatementResultServiceImpl mb5;
  50    final EventAdapterServiceImpl mb1;
  51    final ResultSetProcessorFactory rspFactory;
  52    final OrderByProcessorFactory orderByFactory;
  53    final AggregationServiceFactory aggFactory;
  54    final SelectExprProcessor selectExprProcessor;
  55  
  56    public ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f(MapEventType p0,ExprMinMaxAggrNode p4,ExprCountNode p2,ExprMinMaxAggrNode p3,StatementResultServiceImpl p5,EventAdapterServiceImpl p1){
  57      this.mb0=p0;
  58      this.mb4=p4;
  59      this.mb2=p2;
  60      this.mb3=p3;
  61      this.mb5=p5;
  62      this.mb1=p1;
  63      rspFactory=new RSPFactory(this);
  64      orderByFactory=null;
  65      aggFactory=new AggFactory(this);
  66      selectExprProcessor=new SelectExprProcessorImpl(this);
  67    }
  68  
  69    // ResultSetProcessorRowPerGroupForge
  70    public ResultSetProcessorFactory getResultSetProcessorFactory(){
  71      return rspFactory;
  72    }
  73  
  74    // ResultSetProcessorRowPerGroupForge
  75    public AggregationServiceFactory getAggregationServiceFactory(){
  76      return aggFactory;
  77    }
  78  
  79    // ResultSetProcessorRowPerGroupForge
  80    public OrderByProcessorFactory getOrderByProcessorFactory(){
  81      return orderByFactory;
  82    }
  83  
  84    static class RSPFactory implements ResultSetProcessorFactory {
  85      final ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o;
  86  
  87      public RSPFactory(ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o){
  88        this.o=o;
  89      }
  90  
  91      // ResultSetProcessorFactoryCompiler
  92      public ResultSetProcessor instantiate(OrderByProcessor orderByProcessor,AggregationService aggregationService,AgentInstanceContext agentInstanceContext){
  93        return new RSP(o,orderByProcessor,aggregationService,agentInstanceContext);
  94      }
  95    }
  96  
  97    static class RSP implements ResultSetProcessorRowPerGroup {
  98      final ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o;
  99      final OrderByProcessor orderByProcessor;
 100      final AggregationService aggregationService;
 101      final AgentInstanceContext agentInstanceContext;
 102  
 103      public RSP(ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o,OrderByProcessor orderByProcessor,AggregationService aggregationService,AgentInstanceContext agentInstanceContext){
 104        this.o=o;
 105        this.orderByProcessor=orderByProcessor;
 106        this.aggregationService=aggregationService;
 107        this.agentInstanceContext=agentInstanceContext;
 108        aggregationService.setRemovedCallback(this);
 109      }
 110  
 111      // ResultSetProcessorRowPerGroupForge
 112      public EventType getResultEventType(){
 113        return o.mb0;
 114      }
 115  
 116      // ResultSetProcessorRowPerGroupForge
 117      public UniformPair processViewResult(EventBean[] newData,EventBean[] oldData,boolean isSynthesize){
 118        if (newData != null&&(newData.length==1)) {
 119          if (oldData == null||(oldData.length==0)) {
 120            return processViewResultNewDepthOneCodegen(newData,isSynthesize);
 121          }
 122          if ((oldData.length==1)) {
 123            return processViewResultPairDepthOneNoRStream(newData,oldData,isSynthesize);
 124          }
 125        }
 126        Map keysAndEvents=new HashMap();
 127        EventBean[] eventsPerStream=new EventBean[1];
 128        Object[] newDataMultiKey=generateGroupKeysKeepEvent(newData,keysAndEvents,true,eventsPerStream);
 129        Object[] oldDataMultiKey=generateGroupKeysKeepEvent(oldData,keysAndEvents,false,eventsPerStream);
 130        EventBean[] selectOldEvents=null;
 131        ResultSetProcessorGroupedUtil.applyAggViewResultKeyedView(aggregationService,agentInstanceContext,newData,newDataMultiKey,oldData,oldDataMultiKey,eventsPerStream);
 132        EventBean[] selectNewEvents=generateOutputEventsView(keysAndEvents,true,isSynthesize,eventsPerStream);
 133        return ResultSetProcessorUtil.toPairNullIfAllNull(selectNewEvents,selectOldEvents);
 134      }
 135  
 136      // ResultSetProcessorRowPerGroupForge
 137      public UniformPair processJoinResult(Set newData,Set oldData,boolean isSynthesize){
 138        throw new UnsupportedOperationException();
 139      }
 140  
 141      // ResultSetProcessorRowPerGroupForge
 142      public Iterator getIterator(Viewable viewable){
 143        return m0(viewable);
 144      }
 145  
 146      // ResultSetProcessorRowPerGroupForge
 147      public Iterator getIterator(Set joinset){
 148        throw new UnsupportedOperationException();
 149      }
 150  
 151      // ResultSetProcessorRowPerGroupForge
 152      public void clear(){
 153        aggregationService.clearResults(agentInstanceContext);
 154      }
 155  
 156      // ResultSetProcessorRowPerGroupForge
 157      public void stop(){
 158      }
 159  
 160      // ResultSetProcessorRowPerGroupForge
 161      public UniformPair processOutputLimitedJoin(List joinEventsSet,boolean isSynthesize){
 162        throw new UnsupportedOperationException();
 163      }
 164  
 165      // ResultSetProcessorRowPerGroupForge
 166      public UniformPair processOutputLimitedView(List viewEventsList,boolean isSynthesize){
 167        throw new UnsupportedOperationException();
 168      }
 169  
 170      // ResultSetProcessorRowPerGroupForge
 171      public void setAgentInstanceContext(AgentInstanceContext context){
 172        throw new UnsupportedOperationException();
 173      }
 174  
 175      // ResultSetProcessorRowPerGroupForge
 176      public void applyViewResult(EventBean[] newData,EventBean[] oldData){
 177        throw new UnsupportedOperationException();
 178      }
 179  
 180      // ResultSetProcessorRowPerGroupForge
 181      public void applyJoinResult(Set newData,Set oldData){
 182        throw new UnsupportedOperationException();
 183      }
 184  
 185      // ResultSetProcessorRowPerGroupForge
 186      public void processOutputLimitedLastAllNonBufferedView(EventBean[] newData,EventBean[] oldData,boolean isSynthesize){
 187        throw new UnsupportedOperationException();
 188      }
 189  
 190      // ResultSetProcessorRowPerGroupForge
 191      public void processOutputLimitedLastAllNonBufferedJoin(Set newData,Set oldData,boolean isSynthesize){
 192        throw new UnsupportedOperationException();
 193      }
 194  
 195      // ResultSetProcessorRowPerGroupForge
 196      public UniformPair continueOutputLimitedLastAllNonBufferedView(boolean isSynthesize){
 197        throw new UnsupportedOperationException();
 198      }
 199  
 200      // ResultSetProcessorRowPerGroupForge
 201      public UniformPair continueOutputLimitedLastAllNonBufferedJoin(boolean isSynthesize){
 202        throw new UnsupportedOperationException();
 203      }
 204  
 205      // ResultSetProcessorRowPerGroupForge
 206      public void acceptHelperVisitor(ResultSetProcessorOutputHelperVisitor visitor){
 207      }
 208  
 209      // ResultSetProcessorRowPerGroupImpl
 210      public EventBean generateOutputBatchedNoSortWMap(boolean join,Object mk,EventBean[] eventsPerStream,boolean isNewData,boolean isSynthesize){
 211        aggregationService.setCurrentAccess(mk,agentInstanceContext.getAgentInstanceId(),null);
 212        return o.selectExprProcessor.process(eventsPerStream,isNewData,isSynthesize,agentInstanceContext);
 213      }
 214  
 215      // ResultSetProcessorRowPerGroupForge
 216      public boolean hasHavingClause(){
 217        return false;
 218      }
 219  
 220      // ResultSetProcessorRowPerGroupImpl
 221      public UniformPair processViewResultNewDepthOneCodegen(EventBean[] newData,boolean isSynthesize){
 222        Object groupKey=generateGroupKeySingle(newData,true);
 223        aggregationService.applyEnter(newData,groupKey,agentInstanceContext);
 224        EventBean istream=shortcutEvalGivenKey(newData,groupKey,true,isSynthesize);
 225        return ResultSetProcessorUtil.toPairNullIfNullIStream(istream);
 226      }
 227  
 228      // ResultSetProcessorRowPerGroupImpl
 229      public Object[] generateGroupKeysKeepEvent(EventBean[] events,Map eventPerKey,boolean isNewData,EventBean[] eventsPerStream){
 230        if (events == null) {return null;}
 231        Object[] keys=new Object[events.length];
 232        for (int i=0; i<events.length; i++) {
 233          eventsPerStream[0]=events[i];
 234          keys[i]=generateGroupKeySingle(eventsPerStream,isNewData);
 235          eventPerKey.put(keys[i],events[i]);
 236        }
 237        return keys;
 238      }
 239  
 240      // ResultSetProcessorRowPerGroupImpl
 241      public void generateOutputBatchedRowAddToList(boolean join,Object mk,EventBean[] eventsPerStream,boolean isNewData,boolean isSynthesize,List resultEvents,List optSortKeys){
 242        aggregationService.setCurrentAccess(mk,agentInstanceContext.getAgentInstanceId(),null);
 243        resultEvents.add(o.selectExprProcessor.process(eventsPerStream,isNewData,isSynthesize,agentInstanceContext));
 244      }
 245  
 246      // ResultSetProcessorRowPerGroupForge
 247      public SelectExprProcessor getSelectExprProcessor(){
 248        return o.selectExprProcessor;
 249      }
 250  
 251      // ResultSetProcessorRowPerGroupImpl
 252      public void generateOutputBatchedArrFromIterator(boolean join,Iterator keysAndEvents,boolean isNewData,boolean isSynthesize,List resultEvents,List optSortKeys){
 253        while (keysAndEvents.hasNext()) {
 254          java.util.Map$Entry entry=((java.util.Map$Entry)keysAndEvents.next());
 255          generateOutputBatchedRowAddToList(join,entry.getKey(),((EventBean[])entry.getValue()),isNewData,isSynthesize,resultEvents,optSortKeys);
 256        }
 257      }
 258  
 259      // ResultSetProcessorRowPerGroupImpl
 260      public EventBean[] generateOutputEventsView(Map keysAndEvents,boolean isNewData,boolean isSynthesize,EventBean[] eventsPerStream){
 261        EventBean[] events=new EventBean[keysAndEvents.size()];
 262        Object[] keys=new Object[keysAndEvents.size()];
 263        int count=0;
 264        int cpid=agentInstanceContext.getAgentInstanceId();
 265        for (java.util.Map$Entry entry : keysAndEvents.entrySet()) {
 266          aggregationService.setCurrentAccess(entry.getKey(),cpid,null);
 267          eventsPerStream[0]=((EventBean)entry.getValue());
 268          events[count]=o.selectExprProcessor.process(eventsPerStream,isNewData,isSynthesize,agentInstanceContext);
 269          keys[count]=entry.getKey();
 270          count++;
 271        }
 272        if (!((count==events.length))) {
 273          if ((count==0)) {
 274            return null;
 275          }
 276          events=CollectionUtil.shrinkArrayEvents(count,events);
 277        }
 278        return events;
 279      }
 280  
 281      // ResultSetProcessorRowPerGroupForge
 282      public AgentInstanceContext getAgentInstanceContext(){
 283        return agentInstanceContext;
 284      }
 285  
 286      // ResultSetProcessorRowForAll
 287      public boolean isSelectRStream(){
 288        return false;
 289      }
 290  
 291      // ResultSetProcessorRowPerGroupImpl
 292      public UniformPair processViewResultPairDepthOneNoRStream(EventBean[] newData,EventBean[] oldData,boolean isSynthesize){
 293        Object newGroupKey=generateGroupKeySingle(newData,true);
 294        Object oldGroupKey=generateGroupKeySingle(oldData,false);
 295        aggregationService.applyEnter(newData,newGroupKey,agentInstanceContext);
 296        aggregationService.applyLeave(oldData,oldGroupKey,agentInstanceContext);
 297        if (Objects.equals(newGroupKey,oldGroupKey)) {
 298          EventBean istream=shortcutEvalGivenKey(newData,newGroupKey,true,isSynthesize);
 299          return ResultSetProcessorUtil.toPairNullIfNullIStream(istream);
 300        }
 301        EventBean newKeyEvent=shortcutEvalGivenKey(newData,newGroupKey,true,isSynthesize);
 302        EventBean oldKeyEvent=shortcutEvalGivenKey(oldData,oldGroupKey,true,isSynthesize);
 303        return new UniformPair(new EventBean[]{newKeyEvent,oldKeyEvent},null);
 304      }
 305  
 306      // ResultSetProcessorRowPerGroupImpl
 307      public EventBean shortcutEvalGivenKey(EventBean[] eventsPerStream,Object groupKey,boolean isNewData,boolean isSynthesize){
 308        aggregationService.setCurrentAccess(groupKey,agentInstanceContext.getAgentInstanceId(),null);
 309        return o.selectExprProcessor.process(eventsPerStream,isNewData,isSynthesize,agentInstanceContext);
 310      }
 311  
 312      // ResultSetProcessorRowPerGroupForge
 313      public AggregationService getAggregationService(){
 314        return aggregationService;
 315      }
 316  
 317      // ResultSetProcessorRowPerGroupImpl
 318      public void removedAggregationGroupKey(Object key){
 319      }
 320  
 321      // ResultSetProcessorUtil
 322      public boolean evaluateHavingClause(EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 323        return true;
 324      }
 325  
 326      // ResultSetProcessorUtil
 327      public Object generateGroupKeySingle(EventBean[] eventsPerStream,boolean isNewData){
 328        return m1(eventsPerStream,isNewData,agentInstanceContext);
 329      }
 330  
 331      // ResultSetProcessorRowPerGroupImpl
 332      Iterator m0(Viewable viewable){
 333        return new ResultSetProcessorRowPerGroupIterator(viewable.iterator(),this,aggregationService,agentInstanceContext);
 334      }
 335  
 336      // CodegenLegoMethodExpression
 337      String m1(EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 338        Map u0=((Map)(eventsPerStream[0]).getUnderlying());
 339        return ((String)m2(u0));
 340      }
 341  
 342      // MapEventBeanEntryPropertyGetter
 343      Object m2(Map map){
 344        Object value=map.get("a1");
 345        if (value == null) {return null;}
 346        EventBean theEvent=((EventBean)value);
 347        return m3(theEvent);
 348      }
 349  
 350      // WrapperUnderlyingPropertyGetter
 351      Object m3(EventBean theEvent){
 352        DecoratingEventBean wrapperEvent=(DecoratingEventBean)theEvent;
 353        EventBean wrappedEvent=wrapperEvent.getUnderlyingEvent();
 354        if (wrappedEvent == null) {return null;}
 355        return m4(((Map)wrappedEvent.getUnderlying()));
 356      }
 357  
 358      // MapEntryPropertyGetter
 359      Object m4(Map map){
 360        Object value=map.get("shipmentId");
 361        if (value instanceof EventBean) {
 362          return (((EventBean)value)).getUnderlying();
 363        }
 364        return value;
 365      }
 366    }
 367  
 368    static class AggRowTop implements AggregationRowGenerated {
 369      final ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o;
 370      final int refcount;
 371      final long cnt0;
 372      final SortedRefCountedSet refSet1;
 373      final SortedRefCountedSet refSet2;
 374  
 375      public AggRowTop(ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o){
 376        this.o=o;
 377        refcount=1;
 378        refSet1=new SortedRefCountedSet();
 379        refSet2=new SortedRefCountedSet();
 380      }
 381  
 382      // AggregationServiceFactoryCompiler
 383      public void applyEnter(EventBean[] eventsPerStream,ExprEvaluatorContext exprEvalCtx){
 384        Map u0=((Map)(eventsPerStream[0]).getUnderlying());
 385        m0(u0);
 386        m4(u0);
 387        m8(u0);
 388      }
 389  
 390      // AggregationServiceFactoryCompiler
 391      public void applyLeave(EventBean[] eventsPerStream,ExprEvaluatorContext exprEvalCtx){
 392        Map u0=((Map)(eventsPerStream[0]).getUnderlying());
 393        m12(u0);
 394        m16(u0);
 395        m20(u0);
 396      }
 397  
 398      // AggregationServiceFactoryCompiler
 399      public void clear(){
 400        m24();
 401        m25();
 402        m26();
 403      }
 404  
 405      // AggregationServiceFactoryCompiler
 406      public Object getValue(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 407        switch(column) {
 408          case 0: {
 409            return m27(eventsPerStream,isNewData,exprEvalCtx);
 410          }
 411          case 1: {
 412            return m28(eventsPerStream,isNewData,exprEvalCtx);
 413          }
 414          case 2: {
 415            return m29(eventsPerStream,isNewData,exprEvalCtx);
 416          }
 417          default: throw new UnsupportedOperationException();
 418        }
 419      }
 420  
 421      // AggregationServiceFactoryCompiler
 422      public EventBean getEventBean(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 423        return null;
 424      }
 425  
 426      // AggregationServiceFactoryCompiler
 427      public Collection getCollectionScalar(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 428        return null;
 429      }
 430  
 431      // AggregationServiceFactoryCompiler
 432      public Collection getCollectionOfEvents(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 433        return null;
 434      }
 435  
 436      // AggregationServiceCodegenUtil
 437      public long getRefcount(){
 438        return refcount;
 439      }
 440  
 441      // AggregationServiceCodegenUtil
 442      public void decreaseRefcount(){
 443        refcount--;
 444      }
 445  
 446      // AggregationServiceCodegenUtil
 447      public void increaseRefcount(){
 448        refcount++;
 449      }
 450  
 451      // AggregationMethodFactoryCount
 452      void m0(Map u0){
 453        Long value=((Long)m1(u0));
 454        if (value == null) {
 455          return;
 456        }
 457        cnt0++;
 458      }
 459  
 460      // MapEventBeanEntryPropertyGetter
 461      Object m1(Map map){
 462        Object value=map.get("a1");
 463        if (value == null) {return null;}
 464        EventBean theEvent=((EventBean)value);
 465        return m2(theEvent);
 466      }
 467  
 468      // WrapperUnderlyingPropertyGetter
 469      Object m2(EventBean theEvent){
 470        DecoratingEventBean wrapperEvent=(DecoratingEventBean)theEvent;
 471        EventBean wrappedEvent=wrapperEvent.getUnderlyingEvent();
 472        if (wrappedEvent == null) {return null;}
 473        return m3(((Map)wrappedEvent.getUnderlying()));
 474      }
 475  
 476      // MapEntryPropertyGetter
 477      Object m3(Map map){
 478        Object value=map.get("timestamp");
 479        if (value instanceof EventBean) {
 480          return (((EventBean)value)).getUnderlying();
 481        }
 482        return value;
 483      }
 484  
 485      // AggregationMethodFactoryMinMax
 486      void m4(Map u0){
 487        Double value=((Double)m5(u0));
 488        if (value == null) {
 489          return;
 490        }
 491        refSet1.add(value);
 492      }
 493  
 494      // MapEventBeanEntryPropertyGetter
 495      Object m5(Map map){
 496        Object value=map.get("a1");
 497        if (value == null) {return null;}
 498        EventBean theEvent=((EventBean)value);
 499        return m6(theEvent);
 500      }
 501  
 502      // WrapperUnderlyingPropertyGetter
 503      Object m6(EventBean theEvent){
 504        DecoratingEventBean wrapperEvent=(DecoratingEventBean)theEvent;
 505        EventBean wrappedEvent=wrapperEvent.getUnderlyingEvent();
 506        if (wrappedEvent == null) {return null;}
 507        return m7(((Map)wrappedEvent.getUnderlying()));
 508      }
 509  
 510      // MapEntryPropertyGetter
 511      Object m7(Map map){
 512        Object value=map.get("temperature");
 513        if (value instanceof EventBean) {
 514          return (((EventBean)value)).getUnderlying();
 515        }
 516        return value;
 517      }
 518  
 519      // AggregationMethodFactoryMinMax
 520      void m8(Map u0){
 521        Double value=((Double)m9(u0));
 522        if (value == null) {
 523          return;
 524        }
 525        refSet2.add(value);
 526      }
 527  
 528      // MapEventBeanEntryPropertyGetter
 529      Object m9(Map map){
 530        Object value=map.get("a1");
 531        if (value == null) {return null;}
 532        EventBean theEvent=((EventBean)value);
 533        return m10(theEvent);
 534      }
 535  
 536      // WrapperUnderlyingPropertyGetter
 537      Object m10(EventBean theEvent){
 538        DecoratingEventBean wrapperEvent=(DecoratingEventBean)theEvent;
 539        EventBean wrappedEvent=wrapperEvent.getUnderlyingEvent();
 540        if (wrappedEvent == null) {return null;}
 541        return m11(((Map)wrappedEvent.getUnderlying()));
 542      }
 543  
 544      // MapEntryPropertyGetter
 545      Object m11(Map map){
 546        Object value=map.get("temperature");
 547        if (value instanceof EventBean) {
 548          return (((EventBean)value)).getUnderlying();
 549        }
 550        return value;
 551      }
 552  
 553      // AggregationMethodFactoryCount
 554      void m12(Map u0){
 555        Long value=((Long)m13(u0));
 556        if (value == null) {
 557          return;
 558        }
 559        if (cnt0>0) {
 560          cnt0--;
 561        }
 562      }
 563  
 564      // MapEventBeanEntryPropertyGetter
 565      Object m13(Map map){
 566        Object value=map.get("a1");
 567        if (value == null) {return null;}
 568        EventBean theEvent=((EventBean)value);
 569        return m14(theEvent);
 570      }
 571  
 572      // WrapperUnderlyingPropertyGetter
 573      Object m14(EventBean theEvent){
 574        DecoratingEventBean wrapperEvent=(DecoratingEventBean)theEvent;
 575        EventBean wrappedEvent=wrapperEvent.getUnderlyingEvent();
 576        if (wrappedEvent == null) {return null;}
 577        return m15(((Map)wrappedEvent.getUnderlying()));
 578      }
 579  
 580      // MapEntryPropertyGetter
 581      Object m15(Map map){
 582        Object value=map.get("timestamp");
 583        if (value instanceof EventBean) {
 584          return (((EventBean)value)).getUnderlying();
 585        }
 586        return value;
 587      }
 588  
 589      // AggregationMethodFactoryMinMax
 590      void m16(Map u0){
 591        Double value=((Double)m17(u0));
 592        if (value == null) {
 593          return;
 594        }
 595        refSet1.remove(value);
 596      }
 597  
 598      // MapEventBeanEntryPropertyGetter
 599      Object m17(Map map){
 600        Object value=map.get("a1");
 601        if (value == null) {return null;}
 602        EventBean theEvent=((EventBean)value);
 603        return m18(theEvent);
 604      }
 605  
 606      // WrapperUnderlyingPropertyGetter
 607      Object m18(EventBean theEvent){
 608        DecoratingEventBean wrapperEvent=(DecoratingEventBean)theEvent;
 609        EventBean wrappedEvent=wrapperEvent.getUnderlyingEvent();
 610        if (wrappedEvent == null) {return null;}
 611        return m19(((Map)wrappedEvent.getUnderlying()));
 612      }
 613  
 614      // MapEntryPropertyGetter
 615      Object m19(Map map){
 616        Object value=map.get("temperature");
 617        if (value instanceof EventBean) {
 618          return (((EventBean)value)).getUnderlying();
 619        }
 620        return value;
 621      }
 622  
 623      // AggregationMethodFactoryMinMax
 624      void m20(Map u0){
 625        Double value=((Double)m21(u0));
 626        if (value == null) {
 627          return;
 628        }
 629        refSet2.remove(value);
 630      }
 631  
 632      // MapEventBeanEntryPropertyGetter
 633      Object m21(Map map){
 634        Object value=map.get("a1");
 635        if (value == null) {return null;}
 636        EventBean theEvent=((EventBean)value);
 637        return m22(theEvent);
 638      }
 639  
 640      // WrapperUnderlyingPropertyGetter
 641      Object m22(EventBean theEvent){
 642        DecoratingEventBean wrapperEvent=(DecoratingEventBean)theEvent;
 643        EventBean wrappedEvent=wrapperEvent.getUnderlyingEvent();
 644        if (wrappedEvent == null) {return null;}
 645        return m23(((Map)wrappedEvent.getUnderlying()));
 646      }
 647  
 648      // MapEntryPropertyGetter
 649      Object m23(Map map){
 650        Object value=map.get("temperature");
 651        if (value instanceof EventBean) {
 652          return (((EventBean)value)).getUnderlying();
 653        }
 654        return value;
 655      }
 656  
 657      // AggregationMethodFactoryCount
 658      void m24(){
 659        cnt0=0;
 660      }
 661  
 662      // AggregationMethodFactoryMinMax
 663      void m25(){
 664        refSet1.clear();
 665      }
 666  
 667      // AggregationMethodFactoryMinMax
 668      void m26(){
 669        refSet2.clear();
 670      }
 671  
 672      // AggregationMethodFactoryCount
 673      Object m27(EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 674        return cnt0;
 675      }
 676  
 677      // AggregationMethodFactoryMinMax
 678      Object m28(EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 679        return refSet1.maxValue();
 680      }
 681  
 682      // AggregationMethodFactoryMinMax
 683      Object m29(EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 684        return refSet2.minValue();
 685      }
 686    }
 687  
 688    static class AggFactory implements AggregationServiceFactory {
 689      final ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o;
 690  
 691      public AggFactory(ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o){
 692        this.o=o;
 693      }
 694  
 695      // AggregationServiceFactoryCompiler
 696      public AggregationService makeService(AgentInstanceContext agentInstanceContext,EngineImportService engineImportService,boolean isSubquery,Integer subqueryNumber){
 697        return new AggSvc(o,agentInstanceContext);
 698      }
 699    }
 700  
 701    static class AggSvc implements AggregationService {
 702      final ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o;
 703      final AgentInstanceContext agentInstanceContext;
 704      final Map aggregatorsPerGroup;
 705      final Object currentGroupKey;
 706      final AggRowTop currentRow;
 707      final List removedKeys;
 708  
 709      public AggSvc(ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o,AgentInstanceContext agentInstanceContext){
 710        this.o=o;
 711        this.agentInstanceContext=agentInstanceContext;
 712        aggregatorsPerGroup=new HashMap();
 713        removedKeys=new ArrayList(4);
 714      }
 715  
 716      // AggSvcGroupByForge
 717      public void applyEnter(EventBean[] eventsPerStream,Object groupKey,ExprEvaluatorContext exprEvalCtx){
 718        m0();
 719        currentRow=((AggRowTop)aggregatorsPerGroup.get(groupKey));
 720        if (currentRow == null) {
 721          currentRow=new AggRowTop(o);
 722          aggregatorsPerGroup.put(groupKey,currentRow);
 723        } else {
 724          currentRow.increaseRefcount();
 725        }
 726        currentRow.applyEnter(eventsPerStream,exprEvalCtx);
 727      }
 728  
 729      // AggSvcGroupByForge
 730      public void applyLeave(EventBean[] eventsPerStream,Object groupKey,ExprEvaluatorContext exprEvalCtx){
 731        currentRow=((AggRowTop)aggregatorsPerGroup.get(groupKey));
 732        if (currentRow == null) {
 733          currentRow=new AggRowTop(o);
 734          aggregatorsPerGroup.put(groupKey,currentRow);
 735        }
 736        currentRow.decreaseRefcount();
 737        currentRow.applyLeave(eventsPerStream,exprEvalCtx);
 738        if (currentRow.getRefcount()<=0) {
 739          removedKeys.add(groupKey);
 740        }
 741      }
 742  
 743      // AggSvcGroupByForge
 744      public void setCurrentAccess(Object groupKey,int agentInstanceId,AggregationGroupByRollupLevel rollupLevel){
 745        currentGroupKey=groupKey;
 746        currentRow=((AggRowTop)aggregatorsPerGroup.get(groupKey));
 747        if (currentRow == null) {
 748          currentRow=new AggRowTop(o);
 749        }
 750      }
 751  
 752      // AggSvcGroupByForge
 753      public void clearResults(ExprEvaluatorContext exprEvalCtx){
 754        aggregatorsPerGroup.clear();
 755      }
 756  
 757      // AggSvcGroupByForge
 758      public void setRemovedCallback(AggregationRowRemovedCallback callback){
 759      }
 760  
 761      // AggSvcGroupByForge
 762      public void accept(AggregationServiceVisitor visitor){
 763        visitor.visitAggregations(aggregatorsPerGroup.size(),aggregatorsPerGroup);
 764      }
 765  
 766      // AggSvcGroupByForge
 767      public void acceptGroupDetail(AggregationServiceVisitorWGroupDetail visitor){
 768        visitor.visitGrouped(aggregatorsPerGroup.size());
 769        for (java.util.Map$Entry entry : aggregatorsPerGroup.entrySet()) {
 770          visitor.visitGroup(entry.getKey(),entry.getValue());
 771        }
 772      }
 773  
 774      // AggSvcGroupByForge
 775      public boolean isGrouped(){
 776        return true;
 777      }
 778  
 779      // AggSvcGroupByForge
 780      public AggregationService getContextPartitionAggregationService(int agentInstanceId){
 781        return this;
 782      }
 783  
 784      // AggSvcGroupByForge
 785      public Object getValue(int column,int agentInstanceId,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 786        return currentRow.getValue(column,eventsPerStream,isNewData,exprEvalCtx);
 787      }
 788  
 789      // AggSvcGroupByForge
 790      public Collection getCollectionOfEvents(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 791        return currentRow.getCollectionOfEvents(column,eventsPerStream,isNewData,exprEvalCtx);
 792      }
 793  
 794      // AggSvcGroupByForge
 795      public EventBean getEventBean(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 796        return currentRow.getEventBean(column,eventsPerStream,isNewData,exprEvalCtx);
 797      }
 798  
 799      // AggSvcGroupByForge
 800      public Object getGroupKey(int agentInstanceId){
 801        return currentGroupKey;
 802      }
 803  
 804      // AggSvcGroupByForge
 805      public Collection getGroupKeys(ExprEvaluatorContext exprEvalCtx){
 806        m1();
 807        return aggregatorsPerGroup.keySet();
 808      }
 809  
 810      // AggSvcGroupByForge
 811      public Collection getCollectionScalar(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 812        return currentRow.getCollectionScalar(column,eventsPerStream,isNewData,exprEvalCtx);
 813      }
 814  
 815      // AggSvcGroupByForge
 816      public void stop(){
 817      }
 818  
 819      // AggSvcGroupByForge
 820      void m0(){
 821        if (!(removedKeys.isEmpty())) {
 822          for (Object removedKey : removedKeys) {
 823            aggregatorsPerGroup.remove(removedKey);
 824          }
 825          removedKeys.clear();
 826        }
 827      }
 828  
 829      // AggSvcGroupByForge
 830      void m1(){
 831        if (!(removedKeys.isEmpty())) {
 832          for (Object removedKey : removedKeys) {
 833            aggregatorsPerGroup.remove(removedKey);
 834          }
 835          removedKeys.clear();
 836        }
 837      }
 838    }
 839  
 840    static class SelectExprProcessorImpl implements SelectExprProcessor {
 841      final ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o;
 842  
 843      public SelectExprProcessorImpl(ResultSetProcessorFactoryProvider_c525d7b52d3884fd59612f40273a6b06f o){
 844        this.o=o;
 845      }
 846  
 847      // SelectExprProcessorCompiler
 848      public EventBean process(EventBean[] eventsPerStream,boolean isNewData,boolean isSynthesize,ExprEvaluatorContext exprEvalCtx){
 849        Map u0=((Map)(eventsPerStream[0]).getUnderlying());
 850        return m0(eventsPerStream,exprEvalCtx,isNewData,isSynthesize,u0);
 851      }
 852  
 853      // SelectExprResultProcessor
 854      EventBean m0(EventBean[] eventsPerStream,ExprEvaluatorContext exprEvalCtx,boolean isNewData,boolean isSynthesize,Map u0){
 855        boolean makeNatural=(o.mb5).isMakeNatural();
 856        boolean synthesize=(o.mb5).isMakeSynthetic()||isSynthesize;
 857        if (!(makeNatural)) {
 858          if (synthesize) {
 859            return m1(eventsPerStream,exprEvalCtx,isNewData,u0);
 860          }
 861          return null;
 862        }
 863        EventBean syntheticEvent=null;
 864        if (synthesize) {
 865          syntheticEvent=m1(eventsPerStream,exprEvalCtx,isNewData,u0);
 866        }
 867        Object[] parameters=m5(eventsPerStream,exprEvalCtx,isNewData,u0);
 868        return new NaturalEventBean(o.mb0,parameters,syntheticEvent);
 869      }
 870  
 871      // EvalInsertNoWildcardMap
 872      EventBean m1(EventBean[] eventsPerStream,ExprEvaluatorContext exprEvalCtx,boolean isNewData,Map u0){
 873        Map props=new HashMap(7);
 874        props.put("timestamp",1);
 875        props.put("shipmentId",m2(u0));
 876        props.put("count",(o.mb2).evaluate(eventsPerStream,isNewData,exprEvalCtx));
 877        props.put("max",(o.mb3).evaluate(eventsPerStream,isNewData,exprEvalCtx));
 878        props.put("min",(o.mb4).evaluate(eventsPerStream,isNewData,exprEvalCtx));
 879        return (o.mb1).adapterForTypedMap(props,o.mb0);
 880      }
 881  
 882      // MapEventBeanEntryPropertyGetter
 883      Object m2(Map map){
 884        Object value=map.get("a1");
 885        if (value == null) {return null;}
 886        EventBean theEvent=((EventBean)value);
 887        return m3(theEvent);
 888      }
 889  
 890      // WrapperUnderlyingPropertyGetter
 891      Object m3(EventBean theEvent){
 892        DecoratingEventBean wrapperEvent=(DecoratingEventBean)theEvent;
 893        EventBean wrappedEvent=wrapperEvent.getUnderlyingEvent();
 894        if (wrappedEvent == null) {return null;}
 895        return m4(((Map)wrappedEvent.getUnderlying()));
 896      }
 897  
 898      // MapEntryPropertyGetter
 899      Object m4(Map map){
 900        Object value=map.get("shipmentId");
 901        if (value instanceof EventBean) {
 902          return (((EventBean)value)).getUnderlying();
 903        }
 904        return value;
 905      }
 906  
 907      // BindProcessor
 908      Object[] m5(EventBean[] eventsPerStream,ExprEvaluatorContext exprEvalCtx,boolean isNewData,Map u0){
 909        Object[] parameters=new Object[5];
 910        parameters[0]=1;
 911        parameters[1]=m6(u0);
 912        parameters[2]=(o.mb2).evaluate(eventsPerStream,isNewData,exprEvalCtx);
 913        parameters[3]=(o.mb3).evaluate(eventsPerStream,isNewData,exprEvalCtx);
 914        parameters[4]=(o.mb4).evaluate(eventsPerStream,isNewData,exprEvalCtx);
 915        return parameters;
 916      }
 917  
 918      // MapEventBeanEntryPropertyGetter
 919      Object m6(Map map){
 920        Object value=map.get("a1");
 921        if (value == null) {return null;}
 922        EventBean theEvent=((EventBean)value);
 923        return m7(theEvent);
 924      }
 925  
 926      // WrapperUnderlyingPropertyGetter
 927      Object m7(EventBean theEvent){
 928        DecoratingEventBean wrapperEvent=(DecoratingEventBean)theEvent;
 929        EventBean wrappedEvent=wrapperEvent.getUnderlyingEvent();
 930        if (wrappedEvent == null) {return null;}
 931        return m8(((Map)wrappedEvent.getUnderlying()));
 932      }
 933  
 934      // MapEntryPropertyGetter
 935      Object m8(Map map){
 936        Object value=map.get("shipmentId");
 937        if (value instanceof EventBean) {
 938          return (((EventBean)value)).getUnderlying();
 939        }
 940        return value;
 941      }
 942    }
 943  }

[22/05/20 06:52:24:024 CEST] DEBUG [ViewServiceImpl][createViews]: .createView New views created for stream, all views ... com.espertech.esper.view.ZeroDepthStreamNoIterate@656d10a4
[22/05/20 06:52:24:024 CEST] DEBUG [NamedWindowConsumerMgmtServiceImpl][start]: Statement 'TemperatureWarningStatic starts consuming
[22/05/20 06:52:24:024 CEST] DEBUG [EPAdministratorImpl][createEPLStmt]: .createEPLStmt Statement created and started
[22/05/20 06:52:24:024 CEST] DEBUG [StatementLifecycleSvcImpl][updatedListeners]: .updatedListeners No action for base implementation
[22/05/20 06:52:24:024 CEST] DEBUG [EPAdministratorHelper][compileEPL]: .createEPLStmt statementName=null eplStatement=@Name("TemperatureAlert")
@Tag(name="domainName", value="VaccineDeliveyr")
insert into TemperatureAlert
select a1.timestamp as  timestamp, 
   a1.shipmentId as shipmentId, 
   a1.count as temperatureWarnings, 
   a1.max as temperatureMax, 
   a1.min as temperatureMin
from pattern [(every a1 = TemperatureWarningStatic(a1.count > 50))]
[22/05/20 06:52:24:024 CEST] DEBUG [ParseHelper][parse]: .parse Parsing expr=@Name("TemperatureAlert")
@Tag(name="domainName", value="VaccineDeliveyr")
insert into TemperatureAlert
select a1.timestamp as  timestamp, 
   a1.shipmentId as shipmentId, 
   a1.count as temperatureWarnings, 
   a1.max as temperatureMax, 
   a1.min as temperatureMin
from pattern [(every a1 = TemperatureWarningStatic(a1.count > 50))]
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAttemptingFullContext]: reportAttemptingFullContext
[22/05/20 06:52:24:024 CEST] DEBUG [Antlr4ErrorListener][reportAmbiguity]: reportAmbiguity
[22/05/20 06:52:24:024 CEST] DEBUG [ParseHelper][parse]: .parse Dumping AST...
[22/05/20 06:52:24:024 CEST] DEBUG [ParseHelper][walk]: .walk Walking AST using walker com.espertech.esper.epl.parse.EPLTreeWalkerListener
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][resolveClassInternal]: Class not found for resolving from name as-is 'Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.lang.Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.math.Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.text.Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.util.Name'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][resolveClassInternal]: Class not found for resolving from name as-is 'Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.lang.Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.math.Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.text.Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.util.Tag'
[22/05/20 06:52:24:024 CEST] DEBUG [StatementResultServiceImpl][<init>]: .ctor
[22/05/20 06:52:24:024 CEST] DEBUG [FilterSpecCompiler][buildNoStmtCtx]: .makeFilterSpec spec=FilterSpecCompiled type=com.espertech.esper.event.map.MapEventType@50825a02 parameters=[[Lcom.espertech.esper.filterspec.FilterSpecParam;@7159139f]
[22/05/20 06:52:24:024 CEST] DEBUG [StatementLifecycleSvcImpl][start]: .start Starting statement 3 from desc=com.espertech.esper.core.service.StatementLifecycleSvcImpl$EPStatementDesc@65bcf7c2
[22/05/20 06:52:24:024 CEST] DEBUG [StatementLifecycleSvcImpl][startInternal]: .startInternal Starting statement 3 from desc=com.espertech.esper.core.service.StatementLifecycleSvcImpl$EPStatementDesc@65bcf7c2
[22/05/20 06:52:24:024 CEST] DEBUG [ViewServiceHelper][addMergeViews]: .addMergeViews Incoming specifications=[]
[22/05/20 06:52:24:024 CEST] DEBUG [ViewServiceHelper][addMergeViews]: .addMergeViews Outgoing specifications=[]
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][resolveClassInternal]: Class not found for resolving from name as-is 'TemperatureAlert'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.lang.TemperatureAlert'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.math.TemperatureAlert'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.text.TemperatureAlert'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'java.util.TemperatureAlert'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'com.espertech.esper.client.annotation.TemperatureAlert'
[22/05/20 06:52:24:024 CEST] DEBUG [EngineImportServiceImpl][checkImports]: Class not found for resolving from name 'com.espertech.esper.dataflow.ops.TemperatureAlert'
[22/05/20 06:52:24:024 CEST] DEBUG [SelectExprProcessorHelper][getForge]: Target stream name 'TemperatureAlert' is not resolved as a class name
[22/05/20 06:52:24:024 CEST] DEBUG [OrderByProcessorFactoryFactory][getProcessor]: .getProcessor Using no OrderByProcessor
[22/05/20 06:52:24:024 CEST] DEBUG [ResultSetProcessorFactoryFactory][getProcessorPrototype]: .getProcessor Using no result processor
[22/05/20 06:52:24:024 CEST] DEBUG [CodegenCompilerJanino][compileClass]: Compiling class for statement 'TemperatureAlert' result-set-processor requestor-class 'ResultSetProcessorFactoryFactory' includeDebugSymbols=false classloader=sun.misc.Launcher$AppClassLoader@1d44bcfa code: 
   1  package com.espertech.esper.generated.uri_default;
   2  import com.espertech.esper.epl.core.resultset.handthru.ResultSetProcessorHandThroughUtil;
   3  import com.espertech.esper.epl.core.orderby.OrderByProcessor;
   4  import java.util.List;
   5  import com.espertech.esper.epl.agg.service.common.AggregationRowRemovedCallback;
   6  import com.espertech.esper.epl.core.engineimport.EngineImportService;
   7  import com.espertech.esper.event.map.MapEventType;
   8  import com.espertech.esper.epl.core.select.SelectExprProcessor;
   9  import com.espertech.esper.client.EventBean;
  10  import com.espertech.esper.view.Viewable;
  11  import java.util.HashMap;
  12  import com.espertech.esper.event.EventAdapterServiceImpl;
  13  import java.util.Map;
  14  import java.util.Iterator;
  15  import com.espertech.esper.core.context.util.AgentInstanceContext;
  16  import com.espertech.esper.epl.agg.service.common.AggregationServiceVisitor;
  17  import com.espertech.esper.client.EventType;
  18  import com.espertech.esper.collection.TransformEventIterator;
  19  import com.espertech.esper.epl.agg.service.common.AggregationServiceVisitorWGroupDetail;
  20  import com.espertech.esper.epl.core.resultset.codegen.ResultSetProcessorFactoryProvider;
  21  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessorOutputHelperVisitor;
  22  import com.espertech.esper.epl.agg.service.common.AggregationServiceNull;
  23  import com.espertech.esper.epl.agg.service.common.AggregationGroupByRollupLevel;
  24  import java.util.Set;
  25  import com.espertech.esper.event.NaturalEventBean;
  26  import com.espertech.esper.epl.agg.service.common.AggregationService;
  27  import com.espertech.esper.core.service.StatementResultServiceImpl;
  28  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessor;
  29  import com.espertech.esper.epl.core.resultset.core.ResultSetProcessorFactory;
  30  import java.util.Collection;
  31  import com.espertech.esper.epl.core.resultset.handthru.ResultSetProcessorHandtruTransform;
  32  import com.espertech.esper.epl.core.orderby.OrderByProcessorFactory;
  33  import com.espertech.esper.epl.agg.service.common.AggregationServiceFactory;
  34  import com.espertech.esper.collection.UniformPair;
  35  import com.espertech.esper.epl.expression.core.ExprEvaluatorContext;
  36  public class ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a implements ResultSetProcessorFactoryProvider {
  37    final StatementResultServiceImpl mb2;
  38    final MapEventType mb0;
  39    final EventAdapterServiceImpl mb1;
  40    final ResultSetProcessorFactory rspFactory;
  41    final OrderByProcessorFactory orderByFactory;
  42    final AggregationServiceFactory aggFactory;
  43    final SelectExprProcessor selectExprProcessor;
  44  
  45    public ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a(StatementResultServiceImpl p2,MapEventType p0,EventAdapterServiceImpl p1){
  46      this.mb2=p2;
  47      this.mb0=p0;
  48      this.mb1=p1;
  49      rspFactory=new RSPFactory(this);
  50      orderByFactory=null;
  51      aggFactory=new AggFactory(this);
  52      selectExprProcessor=new SelectExprProcessorImpl(this);
  53    }
  54  
  55    // ResultSetProcessorHandThroughFactoryForge
  56    public ResultSetProcessorFactory getResultSetProcessorFactory(){
  57      return rspFactory;
  58    }
  59  
  60    // ResultSetProcessorHandThroughFactoryForge
  61    public AggregationServiceFactory getAggregationServiceFactory(){
  62      return aggFactory;
  63    }
  64  
  65    // ResultSetProcessorHandThroughFactoryForge
  66    public OrderByProcessorFactory getOrderByProcessorFactory(){
  67      return orderByFactory;
  68    }
  69  
  70    static class RSPFactory implements ResultSetProcessorFactory {
  71      final ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o;
  72  
  73      public RSPFactory(ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o){
  74        this.o=o;
  75      }
  76  
  77      // ResultSetProcessorFactoryCompiler
  78      public ResultSetProcessor instantiate(OrderByProcessor orderByProcessor,AggregationService aggregationService,AgentInstanceContext agentInstanceContext){
  79        return new RSP(o,orderByProcessor,aggregationService,agentInstanceContext);
  80      }
  81    }
  82  
  83    static class RSP implements ResultSetProcessor {
  84      final ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o;
  85      final OrderByProcessor orderByProcessor;
  86      final AggregationService aggregationService;
  87      final AgentInstanceContext agentInstanceContext;
  88  
  89      public RSP(ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o,OrderByProcessor orderByProcessor,AggregationService aggregationService,AgentInstanceContext agentInstanceContext){
  90        this.o=o;
  91        this.orderByProcessor=orderByProcessor;
  92        this.aggregationService=aggregationService;
  93        this.agentInstanceContext=agentInstanceContext;
  94      }
  95  
  96      // ResultSetProcessorHandThroughFactoryForge
  97      public EventType getResultEventType(){
  98        return o.mb0;
  99      }
 100  
 101      // ResultSetProcessorHandThroughFactoryForge
 102      public UniformPair processViewResult(EventBean[] newData,EventBean[] oldData,boolean isSynthesize){
 103        EventBean[] selectOldEvents=null;
 104        EventBean[] selectNewEvents=ResultSetProcessorHandThroughUtil.getSelectEventsNoHavingHandThruView(o.selectExprProcessor,newData,true,isSynthesize,agentInstanceContext);
 105        return new UniformPair(selectNewEvents,selectOldEvents);
 106      }
 107  
 108      // ResultSetProcessorHandThroughFactoryForge
 109      public UniformPair processJoinResult(Set newData,Set oldData,boolean isSynthesize){
 110        throw new UnsupportedOperationException();
 111      }
 112  
 113      // ResultSetProcessorHandThroughFactoryForge
 114      public Iterator getIterator(Viewable viewable){
 115        return new TransformEventIterator(viewable.iterator(),new ResultSetProcessorHandtruTransform(this));
 116      }
 117  
 118      // ResultSetProcessorHandThroughFactoryForge
 119      public Iterator getIterator(Set joinset){
 120        throw new UnsupportedOperationException();
 121      }
 122  
 123      // ResultSetProcessorHandThroughFactoryForge
 124      public void clear(){
 125      }
 126  
 127      // ResultSetProcessorHandThroughFactoryForge
 128      public void stop(){
 129      }
 130  
 131      // ResultSetProcessorHandThroughFactoryForge
 132      public UniformPair processOutputLimitedJoin(List joinEventsSet,boolean isSynthesize){
 133        throw new UnsupportedOperationException();
 134      }
 135  
 136      // ResultSetProcessorHandThroughFactoryForge
 137      public UniformPair processOutputLimitedView(List viewEventsList,boolean isSynthesize){
 138        throw new UnsupportedOperationException();
 139      }
 140  
 141      // ResultSetProcessorHandThroughFactoryForge
 142      public void setAgentInstanceContext(AgentInstanceContext context){
 143        throw new UnsupportedOperationException();
 144      }
 145  
 146      // ResultSetProcessorHandThroughFactoryForge
 147      public void applyViewResult(EventBean[] newData,EventBean[] oldData){
 148        throw new UnsupportedOperationException();
 149      }
 150  
 151      // ResultSetProcessorHandThroughFactoryForge
 152      public void applyJoinResult(Set newData,Set oldData){
 153        throw new UnsupportedOperationException();
 154      }
 155  
 156      // ResultSetProcessorHandThroughFactoryForge
 157      public void processOutputLimitedLastAllNonBufferedView(EventBean[] newData,EventBean[] oldData,boolean isSynthesize){
 158        throw new UnsupportedOperationException();
 159      }
 160  
 161      // ResultSetProcessorHandThroughFactoryForge
 162      public void processOutputLimitedLastAllNonBufferedJoin(Set newData,Set oldData,boolean isSynthesize){
 163        throw new UnsupportedOperationException();
 164      }
 165  
 166      // ResultSetProcessorHandThroughFactoryForge
 167      public UniformPair continueOutputLimitedLastAllNonBufferedView(boolean isSynthesize){
 168        throw new UnsupportedOperationException();
 169      }
 170  
 171      // ResultSetProcessorHandThroughFactoryForge
 172      public UniformPair continueOutputLimitedLastAllNonBufferedJoin(boolean isSynthesize){
 173        throw new UnsupportedOperationException();
 174      }
 175  
 176      // ResultSetProcessorHandThroughFactoryForge
 177      public void acceptHelperVisitor(ResultSetProcessorOutputHelperVisitor visitor){
 178      }
 179    }
 180  
 181    static class AggFactory implements AggregationServiceFactory {
 182      final ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o;
 183  
 184      public AggFactory(ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o){
 185        this.o=o;
 186      }
 187  
 188      // AggregationServiceFactoryCompiler
 189      public AggregationService makeService(AgentInstanceContext agentInstanceContext,EngineImportService engineImportService,boolean isSubquery,Integer subqueryNumber){
 190        return AggregationServiceNull.INSTANCE;
 191      }
 192    }
 193  
 194    static class AggSvc implements AggregationService {
 195      final ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o;
 196  
 197      public AggSvc(ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o){
 198        this.o=o;
 199      }
 200  
 201      // AggregationServiceNullFactory
 202      public void applyEnter(EventBean[] eventsPerStream,Object groupKey,ExprEvaluatorContext exprEvalCtx){
 203      }
 204  
 205      // AggregationServiceNullFactory
 206      public void applyLeave(EventBean[] eventsPerStream,Object groupKey,ExprEvaluatorContext exprEvalCtx){
 207      }
 208  
 209      // AggregationServiceNullFactory
 210      public void setCurrentAccess(Object groupKey,int agentInstanceId,AggregationGroupByRollupLevel rollupLevel){
 211      }
 212  
 213      // AggregationServiceNullFactory
 214      public void clearResults(ExprEvaluatorContext exprEvalCtx){
 215      }
 216  
 217      // AggregationServiceNullFactory
 218      public void setRemovedCallback(AggregationRowRemovedCallback callback){
 219      }
 220  
 221      // AggregationServiceNullFactory
 222      public void accept(AggregationServiceVisitor visitor){
 223      }
 224  
 225      // AggregationServiceNullFactory
 226      public void acceptGroupDetail(AggregationServiceVisitorWGroupDetail visitor){
 227      }
 228  
 229      // AggregationServiceNullFactory
 230      public boolean isGrouped(){
 231        return false;
 232      }
 233  
 234      // AggregationServiceNullFactory
 235      public AggregationService getContextPartitionAggregationService(int agentInstanceId){
 236        return this;
 237      }
 238  
 239      // AggregationServiceNullFactory
 240      public Object getValue(int column,int agentInstanceId,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 241        return null;
 242      }
 243  
 244      // AggregationServiceNullFactory
 245      public Collection getCollectionOfEvents(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 246        return null;
 247      }
 248  
 249      // AggregationServiceNullFactory
 250      public EventBean getEventBean(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 251        return null;
 252      }
 253  
 254      // AggregationServiceNullFactory
 255      public Object getGroupKey(int agentInstanceId){
 256        return null;
 257      }
 258  
 259      // AggregationServiceNullFactory
 260      public Collection getGroupKeys(ExprEvaluatorContext exprEvalCtx){
 261        return null;
 262      }
 263  
 264      // AggregationServiceNullFactory
 265      public Collection getCollectionScalar(int column,EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvalCtx){
 266        return null;
 267      }
 268  
 269      // AggregationServiceNullFactory
 270      public void stop(){
 271      }
 272    }
 273  
 274    static class SelectExprProcessorImpl implements SelectExprProcessor {
 275      final ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o;
 276  
 277      public SelectExprProcessorImpl(ResultSetProcessorFactoryProvider_caf2f130110f740f7be9becf6f4f0a75a o){
 278        this.o=o;
 279      }
 280  
 281      // SelectExprProcessorCompiler
 282      public EventBean process(EventBean[] eventsPerStream,boolean isNewData,boolean isSynthesize,ExprEvaluatorContext exprEvalCtx){
 283        Map u0=((Map)(eventsPerStream[0]).getUnderlying());
 284        return m0(isSynthesize,u0);
 285      }
 286  
 287      // SelectExprResultProcessor
 288      EventBean m0(boolean isSynthesize,Map u0){
 289        boolean makeNatural=(o.mb2).isMakeNatural();
 290        boolean synthesize=(o.mb2).isMakeSynthetic()||isSynthesize;
 291        if (!(makeNatural)) {
 292          if (synthesize) {
 293            return m1(u0);
 294          }
 295          return null;
 296        }
 297        EventBean syntheticEvent=null;
 298        if (synthesize) {
 299          syntheticEvent=m1(u0);
 300        }
 301        Object[] parameters=m12(u0);
 302        return new NaturalEventBean(o.mb0,parameters,syntheticEvent);
 303      }
 304  
 305      // EvalInsertNoWildcardMap
 306      EventBean m1(Map u0){
 307        Map props=new HashMap(7);
 308        props.put("timestamp",m2(u0));
 309        props.put("shipmentId",m4(u0));
 310        props.put("temperatureWarnings",m6(u0));
 311        props.put("temperatureMax",m8(u0));
 312        props.put("temperatureMin",m10(u0));
 313        return (o.mb1).adapterForTypedMap(props,o.mb0);
 314      }
 315  
 316      // MapEventBeanEntryPropertyGetter
 317      Object m2(Map map){
 318        Object value=map.get("a1");
 319        if (value == null) {return null;}
 320        EventBean theEvent=((EventBean)value);
 321        return m3(((Map)theEvent.getUnderlying()));
 322      }
 323  
 324      // MapEntryPropertyGetter
 325      Object m3(Map map){
 326        Object value=map.get("timestamp");
 327        if (value instanceof EventBean) {
 328          return (((EventBean)value)).getUnderlying();
 329        }
 330        return value;
 331      }
 332  
 333      // MapEventBeanEntryPropertyGetter
 334      Object m4(Map map){
 335        Object value=map.get("a1");
 336        if (value == null) {return null;}
 337        EventBean theEvent=((EventBean)value);
 338        return m5(((Map)theEvent.getUnderlying()));
 339      }
 340  
 341      // MapEntryPropertyGetter
 342      Object m5(Map map){
 343        Object value=map.get("shipmentId");
 344        if (value instanceof EventBean) {
 345          return (((EventBean)value)).getUnderlying();
 346        }
 347        return value;
 348      }
 349  
 350      // MapEventBeanEntryPropertyGetter
 351      Object m6(Map map){
 352        Object value=map.get("a1");
 353        if (value == null) {return null;}
 354        EventBean theEvent=((EventBean)value);
 355        return m7(((Map)theEvent.getUnderlying()));
 356      }
 357  
 358      // MapEntryPropertyGetter
 359      Object m7(Map map){
 360        Object value=map.get("count");
 361        if (value instanceof EventBean) {
 362          return (((EventBean)value)).getUnderlying();
 363        }
 364        return value;
 365      }
 366  
 367      // MapEventBeanEntryPropertyGetter
 368      Object m8(Map map){
 369        Object value=map.get("a1");
 370        if (value == null) {return null;}
 371        EventBean theEvent=((EventBean)value);
 372        return m9(((Map)theEvent.getUnderlying()));
 373      }
 374  
 375      // MapEntryPropertyGetter
 376      Object m9(Map map){
 377        Object value=map.get("max");
 378        if (value instanceof EventBean) {
 379          return (((EventBean)value)).getUnderlying();
 380        }
 381        return value;
 382      }
 383  
 384      // MapEventBeanEntryPropertyGetter
 385      Object m10(Map map){
 386        Object value=map.get("a1");
 387        if (value == null) {return null;}
 388        EventBean theEvent=((EventBean)value);
 389        return m11(((Map)theEvent.getUnderlying()));
 390      }
 391  
 392      // MapEntryPropertyGetter
 393      Object m11(Map map){
 394        Object value=map.get("min");
 395        if (value instanceof EventBean) {
 396          return (((EventBean)value)).getUnderlying();
 397        }
 398        return value;
 399      }
 400  
 401      // BindProcessor
 402      Object[] m12(Map u0){
 403        Object[] parameters=new Object[5];
 404        parameters[0]=m13(u0);
 405        parameters[1]=m15(u0);
 406        parameters[2]=m17(u0);
 407        parameters[3]=m19(u0);
 408        parameters[4]=m21(u0);
 409        return parameters;
 410      }
 411  
 412      // MapEventBeanEntryPropertyGetter
 413      Object m13(Map map){
 414        Object value=map.get("a1");
 415        if (value == null) {return null;}
 416        EventBean theEvent=((EventBean)value);
 417        return m14(((Map)theEvent.getUnderlying()));
 418      }
 419  
 420      // MapEntryPropertyGetter
 421      Object m14(Map map){
 422        Object value=map.get("timestamp");
 423        if (value instanceof EventBean) {
 424          return (((EventBean)value)).getUnderlying();
 425        }
 426        return value;
 427      }
 428  
 429      // MapEventBeanEntryPropertyGetter
 430      Object m15(Map map){
 431        Object value=map.get("a1");
 432        if (value == null) {return null;}
 433        EventBean theEvent=((EventBean)value);
 434        return m16(((Map)theEvent.getUnderlying()));
 435      }
 436  
 437      // MapEntryPropertyGetter
 438      Object m16(Map map){
 439        Object value=map.get("shipmentId");
 440        if (value instanceof EventBean) {
 441          return (((EventBean)value)).getUnderlying();
 442        }
 443        return value;
 444      }
 445  
 446      // MapEventBeanEntryPropertyGetter
 447      Object m17(Map map){
 448        Object value=map.get("a1");
 449        if (value == null) {return null;}
 450        EventBean theEvent=((EventBean)value);
 451        return m18(((Map)theEvent.getUnderlying()));
 452      }
 453  
 454      // MapEntryPropertyGetter
 455      Object m18(Map map){
 456        Object value=map.get("count");
 457        if (value instanceof EventBean) {
 458          return (((EventBean)value)).getUnderlying();
 459        }
 460        return value;
 461      }
 462  
 463      // MapEventBeanEntryPropertyGetter
 464      Object m19(Map map){
 465        Object value=map.get("a1");
 466        if (value == null) {return null;}
 467        EventBean theEvent=((EventBean)value);
 468        return m20(((Map)theEvent.getUnderlying()));
 469      }
 470  
 471      // MapEntryPropertyGetter
 472      Object m20(Map map){
 473        Object value=map.get("max");
 474        if (value instanceof EventBean) {
 475          return (((EventBean)value)).getUnderlying();
 476        }
 477        return value;
 478      }
 479  
 480      // MapEventBeanEntryPropertyGetter
 481      Object m21(Map map){
 482        Object value=map.get("a1");
 483        if (value == null) {return null;}
 484        EventBean theEvent=((EventBean)value);
 485        return m22(((Map)theEvent.getUnderlying()));
 486      }
 487  
 488      // MapEntryPropertyGetter
 489      Object m22(Map map){
 490        Object value=map.get("min");
 491        if (value instanceof EventBean) {
 492          return (((EventBean)value)).getUnderlying();
 493        }
 494        return value;
 495      }
 496    }
 497  }

[22/05/20 06:52:24:024 CEST] DEBUG [ViewServiceImpl][createViews]: .createView No new views created, dumping stream ... com.espertech.esper.view.ZeroDepthStreamNoIterate@834831b
[22/05/20 06:52:24:024 CEST] DEBUG [NamedWindowConsumerMgmtServiceImpl][start]: Statement 'TemperatureAlert starts consuming
[22/05/20 06:52:24:024 CEST] DEBUG [EPAdministratorImpl][createEPLStmt]: .createEPLStmt Statement created and started
[22/05/20 06:52:24:024 CEST] DEBUG [StatementLifecycleSvcImpl][updatedListeners]: .updatedListeners No action for base implementation
